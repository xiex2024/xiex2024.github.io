<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>py_notes</title>
      <link href="/2025/03/17/py-notes/"/>
      <url>/2025/03/17/py-notes/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="字符串处理">字符串处理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = &#x27;xiex&#x27;</span><br><span class="line">s1 = s.center(2)</span><br><span class="line">print(s1)#数字小于字符串长度则不做处理</span><br><span class="line">s2 = s.center(7)</span><br><span class="line">print(s2.index(&#x27;x&#x27;))#若填充数为奇数则左侧多一个</span><br><span class="line">print(s.center(20))#居中并填充使总长度为20</span><br><span class="line">print(s.ljust(20))#左对齐并填充</span><br><span class="line">print(s.rjust(20))#右对齐并填充</span><br></pre></td></tr></table></figure><h1 id="集合运算和处理">集合运算和处理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;2,1,3&#125;;setB = &#123;3,4,5&#125;</span><br><span class="line">print(setA|setB)#并集，运算。而A.union(B)作为方法有同样的功能</span><br><span class="line">print(setA&amp;setB)#交集，A.intersectiom(B)</span><br><span class="line">print(setA-setB)#仅出现于setA的元素</span><br><span class="line">print(setA&lt;=setB)#setA是否包含于setB</span><br><span class="line">print(&#123;1,2,3,4,5&#125;.pop())#“随机”移除，但实际删除集合中的“第一个”元素，由于集合的无序性而称为随机，例如纯数字是会输出最小的</span><br><span class="line">print(&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;&#125;.pop())#此处即为随机</span><br></pre></td></tr></table></figure><h1 id="字典处理">字典处理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;1:4,&#x27;a&#x27;:&#x27;c&#x27;&#125;</span><br><span class="line">print(&#x27;c&#x27; in dict ,1 in dict)#直接用in所查找的是是否在索引中</span><br><span class="line">itemdict = &#123;&quot;item&quot;:&quot;banana&quot;,&quot;cost&quot;:24&#125;</span><br><span class="line">print(&quot;The %(item)s costs %(cost)7.1f cents&quot; % itemdict)# %(name)d可以获取字典中name所代表的值</span><br></pre></td></tr></table></figure><h1 id="人为抛出一条异常信息">人为抛出一条异常信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">anumber = int(input())</span><br><span class="line">if anumber &lt; 0:</span><br><span class="line">    raise RuntimeError(&quot;You can&#x27;t use a negative number&quot;)</span><br><span class="line"></span><br><span class="line">from math import sqrt</span><br><span class="line">def squareroot(n):#牛顿法求平方根</span><br><span class="line">    root = n/2 #initial guess will be 1/2 of n</span><br><span class="line">    for k in range(20):</span><br><span class="line">        root = (1/2)*(root + (n / root))</span><br><span class="line">    return root</span><br><span class="line">print((squareroot(5)-sqrt(5))*(10**10))</span><br></pre></td></tr></table></figure><h1 id="面向对象">面向对象</h1><p>python为所有的类提供了一套标准的工作方法，但可能在一些情况下没有正常工作，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class fraction:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">print(fraction(2,5))#返回指向的地址字符串</span><br></pre></td></tr></table></figure><p>此处__str__方法即为内置的方法，指示了如何将对象转化为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class fraction1:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.top)+&quot;/&quot;+str(self.bottom)</span><br><span class="line">    def __add__(self,other):#加法运算</span><br><span class="line">        top1 = self.top*other.bottom + \</span><br><span class="line">               other.top*self.bottom#\可以作为续行符</span><br><span class="line">        bottom1 = self.bottom*other.bottom</span><br><span class="line">        return fraction1(top1,bottom1)#可以加入用找最小公倍数的方法化简来优化,但这部分的重点不在此处</span><br><span class="line">print(fraction1(2,5))</span><br><span class="line">print(fraction1(2,5).__str__())</span><br><span class="line">print(str(fraction1(2,5)))</span><br><span class="line">print(fraction1(1,2)+fraction1(1,5))</span><br></pre></td></tr></table></figure><h2 id="浅相等与深相等">浅相等与深相等</h2><p>对于两个对象来说，直接==比较是比较两者是否引用了同一个对象，而非对值的比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = fraction1(3,5)</span><br><span class="line">b = fraction1(3,5)</span><br><span class="line">print(a==b)</span><br><span class="line">#建立__eq__方法，进行值的比较</span><br><span class="line">class frac:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.top == other.top and self.bottom == other.bottom#仍不完善，可能输入的并非最简分数</span><br><span class="line">a = frac(3,5)</span><br><span class="line">b = frac(3,5)</span><br><span class="line">print(a==b)</span><br></pre></td></tr></table></figure><p>fraction的完整实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def gcd(m,n):</span><br><span class="line">    while m%n != 0:</span><br><span class="line">        oldm = m</span><br><span class="line">        oldn = n</span><br><span class="line"></span><br><span class="line">        m = oldn</span><br><span class="line">        n = oldm%oldn</span><br><span class="line">    return n</span><br><span class="line">class Fraction:</span><br><span class="line">    def __init__(self, top, bottom):</span><br><span class="line">        self.num = top</span><br><span class="line">        self.den = bottom</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.num) + &quot;/&quot; + str(self.den)</span><br><span class="line"></span><br><span class="line">    def show(self):</span><br><span class="line">        print(self.num, &quot;/&quot;, self.den)</span><br><span class="line"></span><br><span class="line">    def __add__(self, otherfraction):</span><br><span class="line">        newnum = self.num * otherfraction.den + \</span><br><span class="line">        self.den * otherfraction.num</span><br><span class="line">        newden = self.den * otherfraction.den</span><br><span class="line">        common = gcd(newnum, newden)</span><br><span class="line">        return Fraction(newnum//common, newden//common)</span><br><span class="line"></span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        firstnum = self.num * other.den</span><br><span class="line">        secondnum = other.num * self.den</span><br><span class="line">        return firstnum == secondnum</span><br></pre></td></tr></table></figure><h2 id="继承以逻辑门为例">继承：以逻辑门为例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">class LogicGate:#超类LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        self.label = n</span><br><span class="line">        self.output = None</span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label</span><br><span class="line">    def getOutput(self):</span><br><span class="line">        self.output = self.performGateLogic()</span><br><span class="line">        return self.output</span><br><span class="line"></span><br><span class="line">class BinaryGate(LogicGate):#有两个输入的门（与&amp;或门），继承LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)#先调用父类的构造方法</span><br><span class="line"></span><br><span class="line">        self.pinA = None</span><br><span class="line">        self.pinB = None</span><br><span class="line"></span><br><span class="line">    def getPinA(self):</span><br><span class="line">        if self.pinA is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin A: input for gate&#x27; + \</span><br><span class="line">                            self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinA.getFrom().getOutput()</span><br><span class="line">    def getPinB(self):</span><br><span class="line">        if self.pinB is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin B: input for gate&#x27; + \</span><br><span class="line">                         self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinB.getFrom().getOutput()</span><br><span class="line"></span><br><span class="line">class UnaryGate(LogicGate):#非门</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">        self.pin = None</span><br><span class="line">    def getPin(self):</span><br><span class="line">        if self.pin is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin: input for gate &#x27; + self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pin.getFrom().getOutput()#即返回连接器所连接的上一个类的输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AndGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==1 and b==1:</span><br><span class="line">            return 1</span><br><span class="line">        else:</span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">    # 在BinaryGate 类中，逻辑门有两个输入，但连接器必须只连接其中一个。如果两个都能连接，那么默认选择pinA。如果pinA 已经有了连接，就选择pinB。如果两个输入都已有连接，则无法连接逻辑门。</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"># g1 = AndGate(&#x27;G1&#x27;)</span><br><span class="line"># print(g1.getOutput())</span><br><span class="line"></span><br><span class="line">class OrGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==0 and b==0:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NotGate(UnaryGate):</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        pin = self.getPin()</span><br><span class="line">        if pin == 1:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pin == None:</span><br><span class="line">            self.pin = source</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line">class Connector:#连接两个逻辑门，内部包含LogicGate的实例但不在继承关系中</span><br><span class="line">    def __init__(self,fgate,tgate):</span><br><span class="line">        self.fromgate = fgate</span><br><span class="line">        self.togate = tgate</span><br><span class="line">        tgate.setNextPin(self)#此处传递参数self,即让tgate的值设定为连接器这个类的实例</span><br><span class="line"></span><br><span class="line">    def getFrom(self):</span><br><span class="line">        return self.fromgate</span><br><span class="line"></span><br><span class="line">    def getTO(self):</span><br><span class="line">        return self.togate</span><br><span class="line"></span><br><span class="line">g1 = AndGate(&quot;G1&quot;)</span><br><span class="line">g2 = AndGate(&quot;G2&quot;)</span><br><span class="line">g3 = OrGate(&quot;G3&quot;)</span><br><span class="line">g4 = NotGate(&quot;G4&quot;)</span><br><span class="line">c1 = Connector(g1,g3)</span><br><span class="line">c2 = Connector(g2,g3)</span><br><span class="line">c3 = Connector(g3,g4)</span><br><span class="line">print(g4.getOutput())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="算法">算法</h1><h2 id="递归">递归</h2><p>递归的三个原则为：</p><p>①基本情况，即无需处理就可以直接return的情况</p><p>②算法会改变待处理数据的状态，使其更接近于基本状态</p><p>③调用自己</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def toStr(n,base):#递归示例，转换进制。</span><br><span class="line">    convertstring = &#x27;0123456789ABCDEF&#x27;</span><br><span class="line">    if n&lt;base:</span><br><span class="line">        return convertstring[n]</span><br><span class="line">    else:</span><br><span class="line">        return toStr(n//base,base)+convertstring[n%base]</span><br></pre></td></tr></table></figure><p><img src="image-20250316214546049.png" /></p><p>基本状态为一位数，于是不断将原整数整除10</p><p>用栈来储存结果，那么python会将函数的返回值储存在栈的顶端</p><p><img src="image-20250316220244264.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rStack = Stack()#将储存的结果压入栈中</span><br><span class="line">def toStr(n, base):</span><br><span class="line">    convertString = &quot;0123456789ABCDEF&quot;</span><br><span class="line">    if n &lt; base:</span><br><span class="line">        rStack.push(convertString[n])</span><br><span class="line">    else:</span><br><span class="line">        rStack.push(convertString[n % base])</span><br><span class="line">        toStr(n // base, base)</span><br></pre></td></tr></table></figure><p>示例：汉诺塔</p><p>其基本思路是，若有n层，从a挪到c，那问题可以分解为：</p><p>n-1层从a到b <span class="math inline">\(-&gt;\)</span> 1层从a到c<span class="math inline">\(-&gt;\)</span> n-1层从b到c</p><p>代码如下（五层为例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#汉诺塔</span><br><span class="line">def moveTower(height, fromPole, toPole, withPole):</span><br><span class="line">    if height &gt;= 1:</span><br><span class="line">        moveTower(height-1, fromPole, withPole, toPole)</span><br><span class="line">        moveDisk(fromPole, toPole)</span><br><span class="line">        moveTower(height-1, withPole, toPole, fromPole)</span><br><span class="line">def moveDisk(fromPole, toPole):</span><br><span class="line">    print(fromPole+&#x27;-&gt;&#x27;+toPole)</span><br><span class="line">moveTower(5,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br></pre></td></tr></table></figure><h2 id="动态规划">动态规划</h2><p>以找零钱为例，采用递归算法结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def recMC(coinValueList, change):</span><br><span class="line">minCoins = change</span><br><span class="line">if change in coinValueList:</span><br><span class="line">return 1</span><br><span class="line">else:</span><br><span class="line">for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">numCoins = 1 + recMC(coinValueList, change-i)</span><br><span class="line">if numCoins &lt; minCoins:</span><br><span class="line">minCoins = numCoins</span><br><span class="line">return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63)</span><br></pre></td></tr></table></figure><p>问题分解为：（change-i）的最小硬币数+1，其中i为一枚硬币的面值，故而循环多次直到遍历每一种可能。</p><p>该方法的问题在于有太多次对相同方案的遍历，如下图</p><p><img src="image-20250317153318112.png" /></p><p>相同的节点出现了多次，而每次出现都会进行完全一致而冗余的计算，这大大降低了算法的效率。</p><p>对此我们进行“针对性”的优化，即用<code>knownResults</code>储存每个节点所对应的数值，在计算时先查找这个节点是否已被计算过，以减少冗余的计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def recMC(coinValueList, change, knownResults):</span><br><span class="line">    minCoins = change</span><br><span class="line">    if change in coinValueList:</span><br><span class="line">        return 1</span><br><span class="line">    elif knownResults[change] &gt; 0:</span><br><span class="line">        return knownResults[change]</span><br><span class="line">    else:</span><br><span class="line">        for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">            numCoins = 1 + recMC(coinValueList, change-i, knownResults)</span><br><span class="line">            if numCoins &lt; minCoins:</span><br><span class="line">                minCoins = numCoins</span><br><span class="line">                knownResults[change] = numCoins</span><br><span class="line">    return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63, [0]*64)</span><br></pre></td></tr></table></figure><p>在这里介绍动态规划（dp），与上述算法不同，在这个问题上，递归采用了更为系统的储存方式，其会储存从1开始一直到change的每一个值对应的最少硬币数。</p><p>对于每一个值，其需要硬币的最小值，来自于这个值减去一个硬币的面值后所有情况的最小值+1。如对于（11）来说，为（1）+1，（6）+1，（10）+1，分别对应减去的硬币为10，5，1的情况，因此代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins):</span><br><span class="line">    for cents in range(change+1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents-j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j]+1</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">    return minCoins[change]</span><br></pre></td></tr></table></figure><p>如果我们需要得到对于每一个值，在硬币数量最少的情况下所有硬币的面值，我们实际上只需要储存新增的硬币的面值即可递推得到所有的面值，修改代码如下；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins, coinsUsed):</span><br><span class="line">    for cents in range(change + 1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        newcoin = 1</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents - j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j] + 1</span><br><span class="line">                newcoin = j</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">            coinsUsed[cents] = newcoin</span><br><span class="line">    return minCoins[change]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printcoins(change, coinsUsed):</span><br><span class="line">    while change &gt; 0:</span><br><span class="line">        print(coinsUsed[change],end = &#x27; &#x27;)</span><br><span class="line">        change -= coinsUsed[change]</span><br><span class="line"></span><br><span class="line">coinsUsed = [0]*64</span><br><span class="line">minCoins = [0]*64</span><br><span class="line">dpMakeChange([1, 5, 10, 21, 25], 63, minCoins, coinsUsed)</span><br><span class="line">printcoins(63,coinsUsed)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的颜色</title>
      <link href="/2025/02/22/%E4%BD%A0%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
      <url>/2025/02/22/%E4%BD%A0%E7%9A%84%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>我对音乐和绘画都没有特别的喜好，因此这部作品于我而言虽毋庸置疑是一部好电影，但或许震撼感并没有那么强。</p><span id="more"></span><hr /><p>作为商业片的话，这似乎并不是一部好作品，剧中的冲突显得轻微而温和，也并没有那么多小高潮能不断地调动人的情绪，抛开轻微的百合向不说，貌似没有什么能夺人眼球的特点。但是，它确实，从结果上来说，也让我这个对音乐和绘画兴趣不大的人能够一直看下去。在我的想象中，看这部电影理想的场景应该是：在某个阳光明媚的上午，舒服的坐在（躺在）书房的躺椅上，阳光能照在身上，我心平气和地在电脑上点开这部影片，带着降噪耳机在不被人干扰的情况下消磨掉一上午。整部影片的氛围于我确实就是这么休闲。</p><p>细节之处反而让我印象最深。声音和颜色像是这部影片的特点。单说声音，电影似乎着重放大了那些细微的声音：火焰燃烧与熄灭，雨滴落下，脚步，呼吸，翻书，乐队使用的那些接线连接时的声音……如若不是我的错觉，那这些效果似乎也暗示了窦子对于声音超乎常人的感知天赋。当然，末尾那一幕白噪音和背景音的突然消失也是一种常规但有效的声音手段。</p><p>而作为影片名字的一部分，颜色自然也是亮点之一。从我的感官上来说，色彩鲜明而不激烈，感觉十分舒服。不知为何，收音机那一抹红色令我印象深刻。而作为三人组的颜色，红绿蓝恰好是光的三原色，不知道是否是有什么隐喻？其实我一直觉得橙色或金色这种太阳的颜色可能是窦子的颜色，但结尾她翩然起舞时看到的正红带来的震撼绝对是这两种颜色无法比拟的，而一旦知晓了她是红色，那也就觉得红色确实最为合适了。而作永和路易这一绿一蓝更是怎么想怎么合理。</p><p>其他方面，很高兴没有把窦子能看到声音的颜色这一点作为“异能”着重描写，很高兴整部作品没有对感情线太多的描写。</p><p>是好电影，但我确实无法对剧情有很强的共情</p><p>总评：4/5</p><p><img src="微信图片_20250222233856.jpg" /></p><p><img src="微信图片_20250222233905.jpg" /></p><p><img src="微信图片_20250222233909.jpg" /></p><hr /><p>P.S sorry ，窦子，一张你都没拍到</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>画中世界</title>
      <link href="/2025/02/17/%E7%94%BB%E4%B8%AD%E4%B8%96%E7%95%8C/"/>
      <url>/2025/02/17/%E7%94%BB%E4%B8%AD%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<p>游戏名：画中世界/Gorogoa</p><p>很有意思的解密作品，精良而小巧。</p><span id="more"></span><p>也是一两年前玩的游戏了，剧情简单而隐晦，倒是没什么好说的。但该作的解密，构思以及美术精巧至极，常常又令我拍案叫绝之处。</p><p>游戏的主要玩法是通过画面的移动，重叠，视觉错觉实现解密和进程推动，少数的彩蛋也能让人眼前一亮，玩起来的感觉有种驱动精密机械运作的感觉，环环相扣精妙绝伦，兼之游戏流程较短，很容易让人一口气通关。</p><p>游戏的难度中等，循序渐进但不乏大开脑洞之处，但各种谜题十分合理，正如前文所说：”精巧“。</p><p>手绘风格的美术令人眼前一亮，用来衬托全作庄严而孤独的氛围恰到好处。当循序渐进的音乐配合着游戏结局时的恍然大悟，总会有一种孤独而荒谬的感觉，美术风格对于结局时那种略带宗教恐怖和克苏鲁的画面也是十分自然，”来自东方的神秘力量“刚好可以用来形容这部游戏给人的感觉。</p><p>《画中世界》</p><p>可玩性：5/5</p><p>音乐：4/5</p><p>画面：4.5/5</p><p>剧情：3/5</p><p>总评：4.5/5</p><p><img src="Screenshot_20230604_171258_com.xd.gorogoa.tap.jpg" /></p><video muted autoplay="autoplay" loop="loop"><source src="SVID_20230604_171538_1.mp4" type="video/mp4"></source></video><video muted autoplay="autoplay" loop="loop"><source src="SVID_20230604_171301_1.mp4" type="video/mp4"></source></video>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>why not die?</title>
      <link href="/2025/02/06/why_not_die/"/>
      <url>/2025/02/06/why_not_die/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff5943a1d742a7171f8993d61ee84fcd7d7a683a4f8abb8df15b6c912210d0d6">65656f3c3e4487cb80a6cc94c13c3fa9964f38cb4069ad37fbab766a4a4a071d1c22f3726806211334047847b7bcc66f717a732ec66513aa820327f601c24e5339b0cfb9d339ec1a1bf7a993b8f9c04e5814d42a8404f594182ac4e4d39d23ab6bc047facbca28b45658e773f6a1606237d7d6837a8390a3a41b7cab9f7cd9859141a89cb97f1a5b2e8188aa281827dcd1d2f5b09ec01c25a9579732267eb752b61f73e4cbec7856b3e5f28f41a5fcc9838f7f343c46bd04f5d8c92fe48b80c15ab7a36d58966f95ff8264dd3c8d9d056cd2f04b403a00bfc4dcd8b4991a031fe73faa9ea3a5720789b5dd7c6d50e7e3515b1ebfa77bef1bf4d57daa53b18edd5d7badfac8187d922e9340fcb6ae5dde6c4a6329aee7a3bd961196a1fdb6d97dac21ba111c4d37b2275e3aaad1cc87167f677bdeb882f1ea0a2bca706e53931e0a33a5e28308535e779fc9250c9416457b00f463c34cffe9564a19c48603226aa9c4c752f02349e1146c9e728f49e774f01ef97e44ae8799e3a5129bcd728631bda8536f1e61683dd1dc958d1fd53f1ea39956bcb4504f99bd56b0d223568e9ead6ef6040fac40c2c237b29b9b542e4996dba5eb1d50ed9ad58c29df33339bbf98674e1ae0f219de972923648daf9debfa8fe3c456f21c41daec55e87402d3b8a6694b0179eb56ff5292962d053fc65d3aa3d8d5a0397c4a263343754a5afade7134e82522974ace94b89597f2d9815f378c57f694af4158d8170a2cda25884c8578840963dcf779e4293e5e079bb47f10f638cadbf95c7ac4a269addf68ca54ed202b67a7289681f932e8369a852d578867e5f1db9829f39e7f161def64853163981b9202a9875e6c314a89bfbaef5ac2602af590995cac36afaaee0e5ac3481655d3a1e754fde5554e5d192b90e3184b7cb8f07cd265c9cc0ec8551371d693cfcd4efa8a8c9033d975c6f984b1ce01087672961d0ff06d2e098565e3618fc013fdd4b1c448a9783288c3940454f34bd2b5cda72533d37cbf4400dc64210efcb2def1bebcb699d69a2b448fb49bbe54000d7004744d118a7649e2832213a59307ff4b31116fbd48f3fefd5059b9941a0023a27571628b5e467c791dac08524fb76d23b598f3fbd9aaf0a544634c62855760e7da4aba2e926373c0a1f171d2de71736728ad8b9e565bd476c4f063547293076a86fb7de64f2b65fc6be2afca2339e093852aded4ab9d3146311729eba7ca38900e14e35b4e28cbe4984c63a33b8eb93817d1d78bd90ef03ef508592313064bc3e71141ee8371454c5891473b02bdc03d5f116f75c7a8261d8565203f3887e37b621f0a12018941745eed85f49228de7d8ebeac41827afb155b75037c4fa84282454bc566a03c9e3f1504719fc17c5737fc25c2dc2a278bccbb71484542180a5b016b964c0044858ede79e8e1a419b2479aa46624c720247c59e9a18680e45560935213bd446fcccd071f52851139a097ab497ea1c9627cba289cbc86275ebe9bd438352ffee28592bb0b2f19c0df22ee8e464f9dc949afa04c6aa55669378a4e25384cc2733f4ce65b63d53f6578616aa439a1f675b8bd7c1b956919e029201ec1abdf75e9ae6a00e494e7b7f6c324c20c7ba8421514014c28c8cf25101c80a19bb1f38422bacd9323583e2ce7ed9b4e65c4b71413beb5169d84313d872166da11b706859b922d8d9435a934390cdbfc1243c294d87e406899611a33def4ca936c9772a3f160afdf374ac287b4e77edb59c3f432ac780c62807ea8b25f347781ccac3fa767c01175408856e914dfdf01916facb56a8a7cbe842605b761c743f42f096e6ef1f81f57f5154c3bc015313babb50a9d02a41f050b872bb1c795ca2f218152d9fd198436acc0f42556009764d138eda12f3aae5b9a2b5805a27e75049326e813465c05dc1bb7c5efa55e65e173a78d3817c0d763788050a92bff3506fafb6ed8398ce8dfbd6d49b2c5fd02b05be2891a700464023995cc1791e8adca4efff3deb5a2d0d059187e2505d0c22b81097ff3befbbd33fab3f7214a0b68156557ab4ba43c3cd0aa5971e2b12ae80a841cb65408b958405d4f40deac3652416e63428c5e7b15549583b5655295d5553a452f80fb97fe464677a0899d6c452089fe0e38fa70fc3442be6eedb3020efd6ef6bb03fb1be2bb7de83abf13ce477f08e68154b64d9d2ae12e48c6e0ef12fc4b50493378da70a3cbf0a35a412aff5d48febc2b0a355c8c22a881932b9ec3eab896a7934cd69aa8c9b4718efb143b381dbd9cfd1a15d0c52b305dfe4184c43fe7241dd61b2eb24920105c69e7d4571cac7ce8b9b0537d5a4087343c9b22dbcfe98b6d3107096293a38aa076fcaea16cdad2abfe24afb652a644e38db03408ff905eed0b5569152b570240473705cf95561b9d3e74272e4b6dfb3a1c97c9c00ed687d05ba4b024f0d219438879011d2e15efa7839ba73bfb24abfc7ca0f3c15623c4567b44d244b5ee09624d05c088814b14fbe292a1ddb9be5ee1a1d04ed7f2f6ffc212afdc41f86266cb78f758c93c204fdda709127d2f076d750bad878768cb23d82c0f447cd286660e852aea4de9789dd600873152d7fbde56ab8101bd98d51925189f253736829dad7bb27b2488987eddc55c69b1d2a74ec14e1b237a53db05e9243976018106e73ff82bd784d0fcfd78d81fc274e62c4c6bfab6777e5e7b8e62f727d720796597201fae18371cc1db2db23f854cd7d42e624d433c02896a5311a65adfb1e2708f32450084ba6dce1d723692a733b7bfe9f1c28c62f0e6a0b697f0ec37f68e9b25a4f88b22734dd152ee8c49b8711fab0e0477867947b2a63aa8ac51a5841b67e21973f89e6b67889a791644329db5bf592a10130c3d07bd17dda48b1826063f024a770ec7735ad6aaee56b3bad6f389ae1868d1578430bf04066fd57fdab9faa93048546f1bfa6a6228fd8fd4ac1edbd069d5191f8060566359ecce8f2698a69062effda22eef69f9cc81dc671bb626b272d043727f60eedce6970a2f0f3056960fe74247aee9ea9a6440e5de1d64e1b08d02e7464ce673d5beb131ba97c876d62112bb19a51572078be331a52338fc261c2893cc2875f8bc608bebc504ab24b8a56c0db38a8168039e9f8a4d82ecafe9e2e8a04e10de10db4d57164a74fc2eca3983d0a93ed723bd3d5004b48afcf196b26adfdf0f2d7cae26084d770247df187df003176ec00ced49411f9155edeb00da17e47b83442eaf437989a0242ca4fc95e8af65cadf2b6b49c2f197c31c94464aaf7e2910021ca73041961176b5e352fdc0e55e122c91f17a15819458a00ce022687df0f27b3d7a288267415617144405fabfff199d7c0056a5d98fa3b9a991945edb05725e3e6b474245c7207c79b55acbe7749e79ed1bd521cbc9bd146c9d97e53369cca95c185cc72343672dfe2ebe561df805e45a64d3556b6d52709a2fd7458bb18de9fd91a800468db906eb2713d31a93340c6836caa130d891648f460ce4d0864f90d33827dc81757cff3ad4a8384787b1b5f3a65a083cacb274cef01225a1f5076e3f706082de4d14b4308bdadc82db036f57d873eebf29a172b5b71d1ae45f15914b35a0a04f8c9be8c07e0fa7a080f2e61141c76ff9ba146f17eab21fb9b4a4ba566f2ff22260bd770aedbbcacac21e195ee84ad3bae9b3fdfbee99cbe8cbaf9370f7aed425fa37d8c0bbfa2b094526e34b9184231c3113ab9784fe73e84c18f0fa515cf51ff47049a858b43ea96c27a883478339aa382a6e18fa3a3125c4f910282160361940104b1af2169ae9c3de21126bb4dcf7ce6de425de42a80ee415d25af5ff4e9d7b68aba83e2be80f7a13b34f5f6bceb31644aa8684f2e66d86e6e2077835286f7c2693260f8158ec3a6670a84de1ec616fbdaff822a57afc6c608dfa3a7fc2e162695c1a4a1c18425fe5f752d54ee929389e5f5b92578f69293bd1337ce4a243a2dc02e2bb92de9c68869044353f9bd55be0683827df1ebd4d4f58a7f56a996d8004b156074b30abfb7214fb67dbfe304c51721a8719b8d0e2973fd8146555191082a3664525f4490d586bb9f1bf8a2df13d150296ee96cbc68c35e6241f82b77a8ed5f281e1008366056c4191638f48ba6bcd6bd37f074a9ca41b1bd872d4fd15eecd203715a6b210b905a59729fd9002f44f1568407a66b8dda564042f4ff48b1c3f095acdfbf9c10cdc79ea1fbba903fc8ca5064cc479c119328be8e6f1f049d0c4d6b33a72c84c617556a15fbe9e392a34b4bf589898fa498b155b0f900c06867ac03d289d1e7f1defe0894146ef73aae2500898343822837756caa93e898ebb469d39ff7d97db7218a99f130d4aef64fd527baf0dbd5d0a4e74f519dc55c5dfae17cdeffac14c9235229b225cd215cbc7879424224b065fed13d6e9e1fea8c172140979b7a063fb8386ec4b31c3baa44c80e065100ddddcec121d07f822950c5845d2c988f94fe95b8e0e81f8fc6c2a5c5a11d261f3ead9540fbdf617d2a91285e5136027ce4bf106669348c158b61252980ea21e77e7db3a0aca86b51e011b351652523a8b773676fc2e48c041f6eef6bdea923e080c72800c211354ec796ae65d30d928774ce431e45a90fc61a74b2ddd6c9ef9ce82271bc6f466dc27b08cb581633d62b7219be8e2bb070cd88b173bc169fb27561af673d10217cda926782b35ac27facb01a82c758a32872ace41df96520caadb7015056312116e8eecb90adce76e4450d87ee78ced3388c34288f941c500725b31de84801e633780b99b1b86abcc4a837b8c4732a57f94f3b98308d1426ecf6329cb8c14c76d4e3b068e2c07cbc3b1760e025ae191a25c22c95fccb38852819f5c75c7bab9d3efb298557bb0d850740639d190762d8dd3b1ea1b7dc58028e460cffbeb747662d438234f01d7c31217a15bbffa44f1ccab84422c7fc48ebe9c1d77f88b584d86e40b2b146cb4b779e69b71fb87cc59f9c2f8cac092cac3063861fa38d0cd67aad4edce1f208df923a0546b39f6334b19add052d32b5edd5c7f2da7b3cdace092a5c0ecab225c38f3e7e72b5599113ac68db515949744409540f9491d194a97d143f401a3f3c55c984e09e6fc2562a310ad061f8fb5bd6c8478d862cb680aecf7a833f1d03f17143affdd13d94823fe19fc4c119be13cf39a8106be980cb7daaa7256820e723d5000311c139da5b0196c68d7e0be5c7d06a10f0bb49f0503bd4b7d7292871814fe1330dc18f39d0247c3249ff2e7b09b0fb019955d4aadae9270092d31058fde7b16be0c1bd7ade4ef4d42e60a0530376a880397d3e227211273b53d4724bb20cb84bad62b6d4a2fcadf4da1a001d9206319b9885548062b25cfd5a4393ebdf12c9f3d7abd1189db01591b7aa465aa626c8c0049d230c5c9e240d2e95783c02dd60ee05b93e14e7f105ed8e6bdb82f807dd11361a99e66726c165018557063a97e9bba664718590b5b3be08dd8448737135f687d43b2128ad597696276b78a830e872006c0e879f394730d565f87d97018bf4a3c698dbc83863729ca0767a7f540febd05362f391b3c8242b7783e247e8fcd303c70345212aeb763a7011813db811c0fb7acdb0027e4d199cc67a0a6052b3807520dd46c8af2d9ba9502d317afa2523af0fed1f45e993db825bb919579856cb422385eb88639cd47f117658eb970a6a37535d59e0f79ed81491a7f8a3ab652467e0014b932f64e3ab8e48bb80781005fa40fc5b6fca86865cb9284dfdb881d0686d5bd7109bed08881dcaf03d94dea72cdd8439b7303c399733d4461d9d33574b2b918048006fd1073ebf4f6ab483e3e8db90448cfb6f6f1f2414c27ddaa9945cf7d2e30ae34a8d959d2bcac2820f0e817760e7df52960b1d06de68925c066e7c51b9cab9cfb5ac0cb0931ffa50f4b918481f3ecd6bd4da102664b93cb5f61c0e40de77e9889eddeeeebc25e953504ee5c35ff0adb0fef351d8d6cf3a5184034280196ac7170dd239a77d8168bec29d27486cbc8ae39cd7f02b5c5f97c4095350cfdc05c0818d8158cd67aa38db85a5782378515ee56dfd662d860b16578265f3397bb47c3b8ec346318e3641eb77943807265e63bfc2ec003de199d5f4222a1c4ee579ac85ca584e177ae8418c56cba9246e69740702e4e626f375138a031b4f2628162e6aca5bc2be9d68b40304d2ba1ab1b1703e99dc1648ded2565ae2dc9dcbb05fc6538981ea0eb60732c53b2a0a9cb0690285e2b483c573177f93593357b5399cf17de5f14e245ea57b1163e38f1213670a43dc1caa6b488734d7ef677dd47e85b0197abef32e9bc3d879525d80953e46c511314b838f4402ff11ae205f0b016f15eb0582544eaf9595c7a6d43bbcab3b7875eec0a13a7f9a8aad4ff7bf4ab2c9e9c2cd79da26c81c717c3a9c43802051a6f7f76dfaae65af9fdcb690338c7148267f37d24650d3224bca85e55ad252cec83e144ef74412a35c155f6d9333b8e43fb58daf1e43c62d892c5c7fd959b4bc71c67bf97dd3aea87e6c46a8588f398a7a582802489dcf975b0dcbaac3393843dbccca0ebb07001d1e967c1fc70933006595f9625f25954ba8ad9eb84e1b29df66dd83a8c6a20f18199ab7df2e058a0eec02d53b8c26333d48902dbcf56dfe45f0a4aa2762dcec2d34539d22366a35ee115fc9c748bec160231bafd6a551d3871ce54c2156b11ca893087ae93b7024eb74dfbee7dd328c2c24f48c5a79ec95a07aa15c46ad3a1384b114d03f80e6fa3268a5b7a2e783f59d081addfb95a27a643e30e23516ad684f66c775f6e9de916cd1273063e2e23acd23cfa0706b7f9e31cff751110a382d62e1d8adc9cb460a9234e6b63ffea325074396467170c4259da0f7b1d03619ac4195a874638c0312b3ffdc077a68e034e58632929f801021497683581012702a4ac0c8da0d95dc7f1b24879cb19a7b4cfc6936878a42eee11db94209e348146441b3fdf4b3b3f5dd13bb26093215e9c1f81efe3e15fb4b434d704043542ada525e02bcf87dba20841956fcf5aa20ee273e297ff436f3aab0964966e047146deafa700a765987438eaa3d85782d9ca763d0393dab6948f2a0863f6e6ebbcec088196516eae783d6cf16883f17c9d0aa08bde37bb68ef42375986a6cecf549f128b6d365294210a411f8c5832e0a3cb04454fcd994d1c1963a13521b4b1e3d6cecc4d534eaf3e011182f0d882cc2f90ac37bc2560e0a45a149f727dbb79e910841af763fa80d98440fd8b602c64463a3f119f7d1b02f61e16d46b0ed2cc7e06ec869c9c671e27e7ba65f0ac20df539217948c8d884b612fd57daf4d809026591c408e4d06116ca687da178642ece251df041c2c08e96531bb6c80cbc02cb98c1709a5931a78ce1cf83483150123d6646df86869dc27662f489ab7dd5735ae2c43c876c2e60c578cc144b290f9c7f716a5c2ecc1a165c254c3bd3981c96f44864c5cbdc17ad5e2c5e9d0b2581872554667a2c2a9984cc3b2f30a526db17d070637f7309207011e61babaf6b874294a723e3f10d698c9cf4e4ceff59346bcbeafc4394a874fbf7d71e90879de45cf3014a62a5dfa696f85a11b06ca6ace5785b071bcc51e6de16be72ae20c946309b8d409177e4accaa543993f272aebf36afd4f0899a0522e9a4266772cb2f66ebedf05049a15cb5bfd6c795dbbcd76ad2bc545086479b2335e01092e1d88fec1ea0f913f702b86a00c569bf785dcc91190f0933835bf0de09c84277b5fb04efeb3e191b717057d6ec86947c680a1b029801b9aa406ab175f74565d65e4c87fae776b65de39d9cbef30fb4fb714b68837b0c55b3656c302a4e993a618d4fb6965aad5b77dc15133777912902f1be3fe5d9e4c4b13daf716528937fe2690b637770e374da18097ebe6dc751dbb22b85b693fa1c3fa414327787fa70b877425764b8f4d07d94465461cfdb1760901cc474fa7293775d9b79bdacd902de5337707223ee1381115a70f37b46ca8648cb421e078b9449436e04f9d82be2266a441d6609a8ade8860146c9d0b22a02016d7b8b35360a6b53e1d7add1f0d4f21c7eb72d3a98b01e67a6a277dfb610b302167d40a7c5d1acad63eb5d80f64a49831c04e265ab40548108df22b2ededa27a7f9892e0f46df574ecd24e3350ea889510fb139e0a95df7c7c5d6cc07b4e06854d201a9933c61f786892a73f1b9c4434bd34d387058f073ee07a4f16778ea7ee442310527d873e5b3955fac825a1b9343403b3c90797a28102d4755e7456305572ee73733577f21b020301100364b8d55f861bb488af64dc985713bfdb017fbbb939920d7131954486f483a2307067557016f4c3dbdd3aeaf8ae8602ddb2f902084460faf8bb3baec28902fff943b5d21d7a5df5033ecaf4f44c95bac4516db7b633e882ef87894859b180f66adf1b58589503cb7d056c5675106b317dc289c35534183470b862097c2d996a4af0fb812f9e93e500f8722333cd08c5a87b0feb08e8e10bd6424c07959c598eabcbb55d5edac8514d409dd1bc5be6949b2efd3624c9bad9ca6968bfe7753fc6122d2c08d9268865964fd44910cf89bd0265a92642fdd627cf23ec089b02be5144bf8acab427f193bac341ebe4aef031f0a3f625b29a6a25adb0a8440990819ad5dda092ee5cdccb595ed8dbd440bafd0484b04a15e8a2b0f41757edf4661c46dc4d625ee1fffdc3c9d3419ad17a33f3ea99673cc674ca0016ea1ca2d73e0eb5f391c7a1d9126944db963178c05d50cdee93c456e353ccad663de68c6c99793bd88068a5cdf1993d9b9deb5bcb37424802abac0ae3ed46683466ec411f7bc1986147bf8752f7b65874681872581fe616f3efcab5d359ca0bf64055e3da6b3daf725acbce08cbaa28d913bb6327f33e146ed54740505fb8ea5f7a0b23ab2d5050666506568c2197fc2df54e64056a6207407bc69cacba170b17dd0274ec724abf26cd1935e207de09081d762fdbd3d4d98ac99a8f491708efcb78b91ee57789725167ffee9d36346226015bf8ebce05ee75093a490c8f2c94797a819fde10750ddfe74ee75756d3ee76a6ca87a2ebf690fb09927dc71adaf093f1c5eeff1b3927bf3da93951773dfcb17521ab733281d95f75d2fd95050f9b46c6495ca1f6ffac3eeb039a06a5b418ec06b22c411e891a64f132a3feead4b39268bf45e7b4158681f0d2d4a9f0c3a8b46fc3a3b81468f3548457e97abd0cd315305d60de7ea2e2cae6352dd77b93ebc754a6fa326197ca9e9924aaaff3a775803dd147065787a235cb92866e48fb8928a8520cdc51ce8771dd704c949ef708c34effd8aed4d374f5654432a02d45192bed5b9c93038972d8c8d7f61665a04533091d8d7d4a956cc15bc7cdd6618d2f88ee5908bee66b547bc7d1e105d7fd8828fc73de77688b211fea2593dedaf69953960ec08fc848c358003d3893a7efe3eddadc51c8102ba756984ed567e47062e754a0d6e47ff84149260ca834778800fd177dde7014d1a9fcd4e0441d9d15cb64cd565ec7a35884ee226e977d357715f0251a7ef7cff0fe712ad1aac539b3d4e1ad0cc8f50adec071185f80fc55ac50554fbb3b7618426a45dc61f37ef341305a589004f74303e1287643fcf8e2d5986e9af5189d2fac2cff1f2691482769af462c4dc8c8f29e21ec963d0e03d2b3d5fae8d543c4b46963f6be5c2cfee1183e3d80a955ea8ef11e2bd47cba8e770ef21dadc0a5d64e9a9882c2c5aa359fc40d8559367a84432ce6074e92dd142365669c5b58cd1f062e60f411d8d84d86e481001b996ccb8433f933c7a711bfb3a3f9fa5d0759d55ae5364cf8ecbdbe93d798e5c28794b059bf412802bbf3f62fed388122fa9a15f27020070cd3e678f9ae38957dec42eb91222271e61d432df80e26fcd4055121b3fe4e172f5e51530d998750c56ac950d18fe772af6e358e97412cc9dfc4e19af3c67af40cedbf03fe0a68dd3d2b68e52629975b530835c09d879172bdcb79098a1352588c391445f9b45aec62cd804a86532e6bdc30a7d5f86d7d3b861f6709af8b5c0a004daf72ed371203c7a7e91494b360dff578353e86efa4c6320e4f148c9ab9ac809c3cb4efd35ebe0edc62b4928393fe334e4fd21a854f19378b2e62a492b8cae9259a7e9b7b8f1396561402f6ad108514a9452894a9828d8f0f1c23c48a7d2e2d9255fd20b02826459605d16944b98feb30538dddad6f07e3606a27f1cdc36c3f241c1891995370675b311078d267281a21c6888837ac30ce6126635439e0cca61ea93df593e66a0d9fbce41f375a0bdf6046bf5e0430b124f8ad0730b29eaa80b86d0b7e7af1a3dbd3f7e72bbae8a12d64b539190e86f79e022853c6ff774d49789668ba508b95c409f5638d70e04c43335755ed4b81fd0ca5aa74b88602ef9ac86fa8b0748e678b90c0a667f89667ca665b1769ce5874ca0e45561940b036c2fc8d7ffaa6b3fcd9b155c01a0101d18dc98e2a3df8a134c92f9795895b9334f9952c9250a8192adf1db78d53bd80db12ec603d59f7a17f28af52113d3fbce1768602a452dd88d6ff1e49be8efd4e888ee777ac8c3ce5bb700e28d957e6707bbbe0814ca4833aac3138e1b2c903d568cc1aa6726130753ee68e581f3b60cca9198437a46b4d6677422d64bf651bc0a204677fe2871bb5fdc647b1c68ad604f209c516fa09e76cbd8f8984a77f7387b9e0cc033960e1ed979964b6e55016dc08af00a542060511598904d18fb6a3bdd90b61a81f544817c1428eb291ae32697ca99bfe141850669961fcfb158e16d4c56a1ac2a0c097fa87419ebce1b8f51ae7b8d1df5e74d077917014b004fab5b55e2e3f758395c82f21e2f9f9a9eedd75d1bac27112daed3fa20b00f30032a00191d22b96282e97ac69dcefaca95f43919ec2f84e986a34e63a4327cd3746895ada5e65c1aec94bf1f0652143f3dd800f7d2b333422e8c273178c94a3fbc5e8f4bfd88dfa52f7c1b8f692f2db6ef496e1518e1e9cf4a22835c2f5daa7161fdee6648afa277f43f20a069a16623556d03dd5b18cbb42a8d0c3536dea41441c6cfb377a33a57ce7c18c9b395a9043a9b82ceb4b4126d9aa0eb045b08bb499214434d8ef186a9a553443e4732b0182ca0df288a5e5d0e145a9b2a59fde6320a552d6ceb95ec222e167af9dbf17ca7a985679b3715db84cead0faf5c89ba6670ead3792a99fa5ec90e999d8d4b491acf8f6ed26d1f7ff45ba59de9913580f32fa074078585965b56668efcc099fdbd86ca040ec2f500169e74a76f2a093dfc523e3cc5b27ca280813f47f4f197f0682fe0da2d36c3bffc5c1d5bca9641d73718e2ff476d4bb0c07a3710b5b52862b89a4d51da15523088da73aba52df3b3ca301649a9ab0ae77687041cb98e5ad7b26791ed33df460796a4361ca8ea274672910499d507529b089ad734139282f1b2f93b105af8b822a3abb09da24a44fc29f1c2dfeb2d0484ec2eef04e6cb7b72eae0ea93e1eec61a4c5112a34231188eeb9d3a0bec7e593af0928d04152378344677823dc390d64d56c076ce9980f46ef76b7d068c252217f69f1fa27085b8e3a87378ad6e9f3b56d5f167a5d77be891720a10989733a05231d07ab6f2686314b8677dacd8bd510e4cb6dcf9d264004dd02c883bd81546fae4b9a0373abd05e806716ffb272d0373dd96843f75514c52b64525380a14e4cbdf0bdf190b410d8c75681db81ca643cb738a179f44c56e9115e910a9471a220cde9f8444ff82abcd2d8905c71083115334fb1750b0d414fed9ae6b6d5917f6c126f2b51e29fc2efe8b3eb13939f7e831cb40c343da968b4ef599920d2fd6242207c0c0ac0fd2a0bfd2fe4359a804a328039b610da17b8bdccf1c19bba468da7bb44321710652c118081ddab22cea83528ca4ca5421b2b9d96420dc79ec3083854179d94d8ccc7576c7f054321c6ab1f271a9d57fed29733c09c24f14bcc93d37fff7407fdfb2f19fafbc3f546f4210a48e2b72949bef934df2874c3ef20d2d1582a96f86362cdd1d6634f5b75edd7eeefc9fe73dfc2bfd1a06c68b1130351eda5b2c691d37f205b423b2916dab4ba7c070a9995dac3efaa0ad26d5377ef68d9496914f641293974bfc43862ae5f047d306977602665910d0fb68867016a571b44e028b04a5520d2adcd51595c4fdde6fd04dd542ad03cbe300ef2ee7f87d2f225f3facff2772971fbbeccaf77ecd125e2102fbd00940cb552d04ca0989ca4731f43cfea8134da3a64bd3c114604557062670f6d2692b8af5b53f7e70148ba39da4d2b66d2ecb7d72f05f67d37aa2eb354498d7c79c19dd5dcdf7fb07347ac760dd56314be2594dc899f7172cd24c2936c818b15ebad264faf0ca3b395eb86b8e7aa13062ab625b53f51407be9fdec04827b00ef20b3158d1ec96e123c1a46d374cdbd79d0f8c929ae053745c3f2a743563d83a056722808389eb1f3deb1fdf4b561cccbadc2185a848225f8d4f2441dc95154cdb50f6c31d2eb58906d4b0084249e7a3bd3b7b1d3338f4ca6a92f4af8a67a266c7b02411029fb5b7157d35beba0ed472baf210a2e0f1301fe342e83091f47edf1fcc62a1a8318315b71dbbc74ed961001f64ca9fdc8993850f0d454807185617838b957f8e81b6d492532c93aaf3e16ca52d5be6314e180b673de633edce8930123c9fb2cde0ecc12f3132e0211620e7dd646e5c75fc58e5910fd5b1560551567a87c9c1a31f73da8cafb07972bed03e33850db9d4b093e892949492e5d8180015931250c5f010fd4367c97ef85ac0204c2baeed20a9750f7478dbdd584f34fb5f0fdeb8fbcba20c7ade0975a81a97674b58e215501f3c5b12e84198f5729fae96b887638fec33dd7b2a18202cefdf0400148648812992b7dc18e12e07edd6da8c7b049d7799caff328a1653b0fa21c74565fe488c48f08a1bebad4bc8e1ca591ed567a8431f299448eeb1e0524e86eaff1edcf5236c976ce868761f8b233beba10dd74af7f4025b7864d02973195703eb00e67d4b52a18304e4ae338181bac9cc9323e63495b28be2539e711af000832c52bbb519946d4b0c9d3c7d14d84fd9ff18b7840e8112a4f07b7ad510ae960b38dfb9856335b9c3abd3a5177752e149efaef8f0d10e3b88947e53a4f027179b357478c1f185e129a4a58ef8b5ccfd02d5474a2bea9f0ea1553907800916b647b6a16ce4e39e0e351eec4d511b83e82ffaa5ca9a67ccf906584a4a61f1e2361ff16a5234314389cec5a2f23d9036ae0115831740387711e672f64b47652389f38773e82ea2ace706573e9e85cda89dc5cfb8b7672b60e2af195b0213a45cfbaf498b1d6a8979ec81cdb6fe24ff9705b0f9d2c79a7f3cf2ba7cfb20eded42e1403d42214a25d96a67790ea50c87113778c73f6f53ae01e71353660e71e98da66d7478b78a9d1fc088098c17c0988d6c5088ff496dafb603cbc680e6d14c8707c84000cdf690623057f4446adc3257518a2e3fff2ba6785fff7d56c4cbd6426dc5cf917415b139e09e97d55d3ee8c65b0d160b47673b83c303ffc4ecf4b433acda4d65fb0b8ccdad7e38c992383190bb0a9970cfc93fbe9f8bc9532bb30b48157678e465fee424ea1ea02f0f9712dd50dafa8327d266fc2075333ad6f378929ac0dcb95d06d5ef50b1f191edd2100efaaf8ea12e7effb3162d6bd3952345bc2a16436ce3d8b20549e14f2fc7e61f6b3e48dc0985ce66fb2a14dd0ed52b26b8a8d38cff82f28dce4fe8e760141dc78689e93711e965fa93e5329773b6018b19dd3119ee5ca580e3335450803d73428c146082910102bc0fd9569d3efc56f4ac6b2a3604a5735c25144233debd705cd67c9cdb3b64ed30e62071cf628c88b8d942abaea94558fe4015ed92e0d3ce7cb8c5b83dc718e7ddd777e1d9f4ba36832a4357eb6c8b42b643c520de9a3effb5daa252145ffdb1f686317144f848b17dec09b36a5d9a0963e26d8595a5b7fd1a0b01b372892fd2bbced8b914e1a30490b70822511a4bce32918118c495411f2665cdce82663419e3d770919d1cdd2fd33353f1ed234d0392df9e3fcdb467201338fc06a6b6cf9e69490b0538043e1f5b5fd414cef8f261e12b77dbb0505c4f68a716496cc09a470d5770bf54370a857e3263eddee11db8f75fd3b4fda3cb3a3d18933cc6aadb04421625c82436fa1d0008c4808eca9bd3b7cf75fcc6ca26012c24095c0e3ce4f3c2569367b90d98f9fc1e758ab1a110e4a0426ba786695fb94d342e543327af06a30aa75b048f12c0d7f99b1805843a3df4bb2f04fba06012b3f3edb2d4dce3c33bc6b74205328df9c6753b0722197da1e6a8667dc49c7fcc2bed3e96b891fe47b512c06e2a91b72a34919f4883757fad8c56f028b81c937dbacff65f8e132a3373e3664f05d25a1cce9f6f26313c15315c306d7d7167c489a262414540054f2e2ec88b4b03731afcafa2db0e510d0d374752fe951e56ff18964c534d7207674dd28403f03037cbc58a0f4e3d96d2b053bb38ffdd0188ef11a6914f6cbb5f8a8aef2ffe87897a495bb7a4194a2a8065ff3c32e08be85c77eff61332e0f6e22133b57d6bd9504e49a5a7de87a31e71de1abfa73316c8486fb8bccbbcf73a62e298bdebd3dfad2bf0eff5eabc19ac96976f51d0597e9f2368c8e7fd5d972151a946ddf50fa1e30ef4f745d8c05ff16f2205147294e8a55ecaab3e23db25fc6ab8d4f2c806ba5382f3b67b77559c00717393666c773b954124af7a6bed48828306988a7c5f126d21c2d0616db6d9711a66ce24b419f529768871e754fef39636f2d606508df6d72abb06d973864c3b97da9c1c777e71f1190d019fa5ef089d8ffff474c5d950815e1501e8ca4029bae2e318feaa1b1c95241919f862a1d1c1c7f2fb9d7c7f58e377b07e9ac84cccb7dd79626d8d594de44c5930f1c448a6122463c38218d5efbf67bcefeb876e9674b51191f9bd21061585f1674df27b018b346a459fce1421544ab2c3bb93d88fd3d17eb91b1868ed226f23eeb63c72d5a468883fc2b11c272b269925d128ff3146935d2ce843b62fa8b55195fc18dc52e2fedd8e0fd57195b6ae21b55631ab63f887d1e497ad6625831449daba34da47f1a3d83dbf15101a71981e7fb2f0eb2837a26173aa31b6c302fc361a6a0d4b73dc74a50c81b296798e1e767d7d05eb79085fc6ef17a7efd5aa288f5d7ec648faa07e84ea5333bc541598a197809bc22802633317407597b06d8c681175c083c023b4877ae39b541e46090b88f86c758e1d8a10a53f4ce4582ba054fb12a61e30a0d298b5b7a548a2c18dd4dd26bb9486eda3d1585e292e017b73ae6a187a3cd5c9ae94de7c734e32e10bb7b69376e4cb2e08e72c934f500cab3fa71f8385618be186bb26547ab30429a0ea440dcedf58bb926a48208aed96cab4fe67586ff9b25671ff66f3d67546ed815827414e88e113af107f62f47fd3a27b78e095b4b8c49d0e1a1772c00dd0f6333598d8fbe6c77989965fdd5df8cecff9b6305a6c071e9fcebd02bc6c1847eed41b1b66e97494310568f1382c58ca679fb2446bafc06fc44f30a6529273bf1a09168952df0ff208a00ea24121a0a89aff371084fd607658e5a3d04e58672b00b4be31ab6689fd0b84fbc2cb5729c7a2b5b10dbc0933df1b10580fb9693b4953b761ce07bbdf61700110dc0d58a69e570cd6f43db8070eb4ae849b4f0f4835595a38fabcc907f04212507914a54620d6eef2b81a78c9a42645f627913d6d87c715c74f185ba7c30825df6556bc6a0507bd498c46e6a86b5deb2f6e06fcaf95a7cfb0f605e4429e21580a7202277e7c440e2209cee2b2702cc4811e9af3ad4afcb5a2ec9e0f549abb3d636e7f851738298f2c18b881e538cd0c15b375801fc6f444d4aaa3df0538839c76acaf4392775b9796d528501f777299aa0e2eca73fbca9a82d3d7136e0e3e4d5f3242b625bb16d80e1ca45e63529abeba784463cb306b34bfe9ed6b0d3fd274dcf30f9e249b3a711b684a305242584edcd448d1d51cd9e858e47064a74ff0bb2a6c580f0507d7431fc44808a972bf9b87a878ffd0609abecc16ec8dcca53cf21b1e1230df30410f4c5fa65596a1672bb507313500dbe228eb6dc5f02c6f05115c2216c6c71692912bb9a3101399738fa2ccfcaa3f0342c8d07f74f3c042c83ce16f124b30a679e29afb14eab1d4e685438f83f3ebe7785c0a8ddc3ba7c05439af89b9d066a1d1562809ebd6d3dced449a0117567f9a16581d2b3f542dcac58216d7239c087c9511da9f0621d67bb2247c95201ba143afbccac23e7120e2cc1f0090b0c5ac1fadd85e4ce434be0fd3fded70da00c9ae17f0e4480917c9386dd2c2f2a3a02b003d0c28e00411c798065ef90c4197c99f9fbd138c190a6151a03ccc4e3d6434011671a24c9a173b1d53cd7a900222dcaa707f7fbd487f19d3442e11654f0f374b73537caeaf7eed36ebb9d72613cdc297a9bc7c21bc2c3ceeb325011d0acc84811ea46aaa12b0177953c483ae16c4e5a188f57c4546659399ed02b3c07cacdec9d78cce723609bc6bf5bf6344334c8bbf53560158dd33ce7b5775b36142c9f8616dadd181387be7efaff5e8868f01cd9000497c95cb57b32f07409695d172d2e7187f66835d7f06f1996154438d45022f2f85203901b4f47655a5e175c529242b73cc2cec4e4dc2d1f0f7387f603bb6026b6723824bc499641a43af794a31be7f879744f7c23475e59824a43b946cb7375f925ff695e24d1969f203cacf2575cb3cb51146eb2c7db8a33c9ab6dcd635af8c2939803d0a7f3678a98eca48125b60d9d6fb8061c15a02aa8b46a1aaa0fc7865cad457e1d88c825ca6ba1beff2be3ea79dc4e6d8fc296796c43be1308c3cd47f54df7e72f3b9a1ec23e1a8d9a6a3145972607ea6ae51c18702f71c670d2463a72bb1206c56ef10a90d3f793fdb2b05ba5c6da6cd4287492d62f3d29814c8d95c99187e6f8e0d9d4c2569e83695aac04cb8a7d95a8ba29c89a624afa83f308836b99fa18660b9d9a03d7af337eec85f1799d774cb00a61dc79056c7b67a8b943929287ef5f8667863871ab2cd151efef53759064a6636122879f99dbf97d595b862fffcf0e684393260376fa1575663ffe445c41240454fd6194a62c0ab3c0499859ad06e1105e620901deebebbe1dd7c3fd12f45dabe4e9d277ee4d939d2637525ec0f41ae86ad1828f79caa41e707e84e9d50a14cf8d8ad6f9ab8635348898db910984d3895078ec86fa8a48dc6619131e44c69ac22dad14fe30874fbad74f10dd27cf7a42cc46a68265337a2e413f2a54a6db26f8669caef72874a7d52a0ca23d9d29d3f3818ae06f27cc42ffba37d93a060a9e48f18737aad134a87ed4bac0c64786092687c35dbd9c437ff5997af4222dcb1a912f3ea6ec2c4a12c96227bdc48d45be0a138ee08373aefee02c26fefaa7ea6862c86f061ee7e2b7baecf3c0224fcb4238ba09ceb8f7ff4a291ede6cd039e38575edb7b0f57794f17516682deb38a18e680d79b5628d23bcd272f526a35def5e1b7819963f7cf418fc03dcc35883b27ff441c740699ad54dd6383ab849cb8049302535fab7851f43977ae9014a8c1a44cec96eba5eb6c5b039d0316282df9736b78c43c1b78fcf18283f2745b20eb639a75b6eedfcae80acb61a4c1d36d725602c01a8959bd8eae5ef1b4fb3658999c4bed77e576397bb9849c0edc10d5b4d22237300d1ec48b87a684ab3e01c8509b0c90d2ced66123f5991ebc7c9f90fd0678e54f7c94d08b5265034ad0ba7ea739be59437ccc2759b926a5ef259bf574edea4a95d915ae3fe5a1d40475f806da6676827527b47179152e7d26b8db0eeb064dffbdc14fcf53e7f0e14cc4582117fecca76077ac1c6bd82c732c934abdd1d1224e9590d442f77bb6b5626644f4bf0188f161df867a931fe9126a63c98ca9fee010504c0da7411a77117963db6b6a8f08bd1c2800dfb9804d3a20a6b312af61a93f316065b0c1ded6b1e545d86f7876b34d1256e2a181f57d4b029f3b30261a1e152432ea65486e49f904928b5a00c90f309d76cbbd8cc1ae9a7e6ac5f2e74c6fdf8bba2d9712f43e382afa00d8f11a770a2b000533992766ad6f48cffe55f1560c87171d069da541ae4fd22a433b378c2e89c15cf5d75570e807f616602693c711f39def00b4886eaa8ac9c370ef7dcdd256f058bad9278df6c647cb1ca32481eaa0c9ae62c35ba70aeeb1a898456001eb596fddf2491b3c5613c9e5c27c52e6197017ae032b82fe1d7e1ecfae4d5213092c17453fb68772ff1485115339f64e9ee0d92cb6499bde49f9f60a227366a4a8eaa4d88784656a444f819ae646ad0644e041f2bec63462bbda4e4afb5b9252ff21abdeaec8b87be84b7b05fe1715975c4d8c8cf60ec87dc48042206008d0a9217924ffb1aba326266dc00b78b10f8cd7a36507ec7aaec1be29af93657f80a3edd225c5581f10a821648d264f9062d006a315c424c49880b8bff6f9e9f2c2ef3c7147439d509dc0b3cac811d1fe94d340658351d5a5bd7e179fbc14e08832b862e71803f4893de08f185b954d75977ab64294dc0759fb4793155820db19429628a3fdd78d64e3ee81a7e1785bf85428d97c659fdda92cb2ff396b5ef0e34d04e5e0badebd8023cbd0de56d3ddeccd5186dd03915416869da1d6e54ea5dc8e580f75b0c2ea6061067289057bdfcc4f24117843edb694d03042e40ea180db7b29a9af76ce9992112c621cf8c8eb4e2b30b36bc565e8e1f4ac3bc4b58db46b3cab37a82a0d46adcceaf607de82f0606a6fff5fe45c1750a2b3946173d518e9060fae8b76454e0efcf30305a98aeddc46c01d99a0bbffbf31e4eed5e9ef271f62d7f66df3fec96de646e07b159fbf615e6541c5a9c36b601d57a259b8c105d43e2fac391f59eaccf9a8db238f2531ef9a6a6ba3369ce94b9630fe582a10017ceb85019418cbc961084e3cfc4d4caf4f1ae7abbe050955cb4cc3bb3c597b127dd13790b7c599dd1874f148e05704a2b53b78537e990232a0398ea3e46361f4056c736bf21a497224ec724854be765561f15164f08bd66d14876e8d3d8224d846331d24cc3a730798f4cbccd7f1742ea4634add1932a950b6d460adc7cab473718c11671a04747d0e7e7e83111899a2df31d585e48433b5a48e0727b973a48fe1692874c65429c22e7a18c6ded6a449df7df64e0d697bfec2416c3211484674a4917adcb38645683a91669c5050bb2f84c84e2a1fa535174d8dde3079766ebb2682ddf0105479a85254db1a7daf413474b8db4c999cf971abf7d690ceb05a88698afae1bb06956131af71c5661c25305bbf245213b12077d456e394fcb9daef6ab5467df2d3a0b1215b3bd050a66aa16708a2e8bf270dfa8216932c4e9080c88c8870c4bf42329db5d2c1da9d76ffc317a22085ab253faba0d020bbc21afaa77312d54a78b0833ec28a986dde8db064c6c5d59768e4e02b279efce422a5602b1558c659b1e1d3902b89f5698c5ad8653e369c1588d4982f415087515fd2e7e8f1284b2745f10b74ac843a878250db3dddb0510ee5be2aa35bc31710c9cfc49c7d8803c6db629974c54277556a7c6325332ea05feed3c941c39b0340808ab827e537d87bbf4ad3df99a590571c15fa8fd270cfe69cdaab33059f133151f71b76acaf83c0732b06b1b47a453ca8a9d5b545ebc77e74b843d4eb29161a85b8b6c0235c3bad5214c2d5eaf7ccd6c3b7db028764a3fe3e3c4cef6a5bac55062036bad1e7350e8939226e550a79cb0eb5b3e8a73b09306fff7f6247d34f01d846783c2efabf09e8df8d38f308fec28192aa5377e39e1743aa1fe85832e0bd68c3d7355c5eb507568b616cc7784694737ae11f80ca1a05c395322a9ecc0b44dc7099a47b5beef5b83b34f53e527c90402c5dc98</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">why author alive？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紫罗兰永恒花园</title>
      <link href="/2025/01/30/%E7%B4%AB%E7%BD%97%E5%85%B0%E6%B0%B8%E6%81%92%E8%8A%B1%E5%9B%AD/"/>
      <url>/2025/01/30/%E7%B4%AB%E7%BD%97%E5%85%B0%E6%B0%B8%E6%81%92%E8%8A%B1%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p>花无凋零之时，意无传达之期。爱情亘古不变，紫罗兰永世长存。</p><span id="more"></span><hr /><p>纯洁，纯粹的爱。</p><p>美好到任何人都不愿意亵渎的情感。</p><p>很高兴最后是happy ending，即便仍有遗憾，但已足够美好。</p><p>如若有一天忘记了剧情而再次看到这寥寥几句话，希望你重温这段故事。</p><p><img src="keyvisual02.jpg" /></p><p><img src="keyvisual01.jpg" /></p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> film </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for freedom and life!</title>
      <link href="/2025/01/06/for-freedom-and-life/"/>
      <url>/2025/01/06/for-freedom-and-life/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不妨猜猜是谁的名字" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0564dad90fbed1cf21d8d3034bb603a5045b9dcd31ce404617ebaa1c155ac4ba"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">如你所见，我将确保全文出现了每一个人的名字</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loner</title>
      <link href="/2024/12/02/loner/"/>
      <url>/2024/12/02/loner/</url>
      
        <content type="html"><![CDATA[<p>游戏名：loner/远方</p><p>很简单的一个游戏，甚至可以说是有些无聊，如若放到现在来让我玩，那我恐怕是玩不下去的。但放在高中竞赛那段时间，却可以说是刚刚好。</p><span id="more"></span><p>游戏的玩法很简单，操纵飞机穿过一个个障碍物，在达到一定的公里数时即可解锁一小段故事。3+1章全部解锁后，就没有新内容了，不过可以解锁“禅模式”，也就是没有障碍物，没有尽头的无尽旅途。想来，“禅模式”才是更符合游戏名的玩法。</p><p>76段故事可能反而更像是游戏中最重要的部分（当然不同人，甚至是不同时间都会有不同的理解），现在我有时打开这个游戏仅仅只是为了看一看这个故事。剧情并非多么的惊艳，但是it's touching 。避免剧透这里就不仔细说剧情了（可看这里<ahref="https://xiex2024.github.io/2024/12/02/loner-story/">loner-story</a>），只能透露是反战题材的（笑</p><p>这并非是一个多么完美的游戏，但无论是玩法，画面乃至于音乐，都很适合一个人郁闷无助却找不到人倾诉时阴暗地在角落里消磨时光，短暂地脱离现实，孤独地前往远方。</p><p>《loner》</p><p>可玩性：3/5</p><p>音乐：4/5</p><p>画面：4/5</p><p>剧情：4/5</p><p>总评：3.5/5</p><p><img src="微信图片_20241202135004.jpg" /></p><p>tip:据说taptap上的版本收费且有很恶心的广告，建议在googleplay上下载。</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七年</title>
      <link href="/2024/12/01/%E4%B8%83%E5%B9%B4/"/>
      <url>/2024/12/01/%E4%B8%83%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>我选择将对七年的测评作为第一篇博客，或许该站会变成个人的游戏评价收集处。(笑)</p><span id="more"></span><p>以下为正文：</p><hr /><p>心绪难平。我很难评价这部游戏，公正地说，它的游戏性极差，比同类型的《to themoon》还差；我无意将它的剧情封神，但至少在我这里，它的剧情水平接近甚至于超越了去月球。剧情的逻辑毫无漏洞，我原本以为它忽视的东西在最后的最后忽然提起，并成为了扭转局面的关键。</p><p>前十五章可能略有些无聊，但中期到后期的处理十分紧凑，每一章结尾都会是刀子或者反转。当在主要故事末尾出现两人相逢时我终于嘴角出现了笑容，但此后超过十个的ep又一点点温柔地展现了残酷的真实……剧情中的伏笔数量超出我想象，许多我以为只是闲步的对话在数十章后突然得到了解释或者利用，即使是原本并不令人在意的配角也隐晦刻画了背后的故事。游戏中交织的友情，爱情，亲情……感人至深。春人与葵，17711个七年，当葵在漫天的纸屑配合着戛然而止的bgm下说出那句台词时我的心脏仿佛也骤停了一下。（试图对感情线评判但是失败）两人之间的这种信任简直是一个奇迹。即便最后两人不再有交集，但春人仍然没有失约。这种程度的感情或许并不现实，但我仍然羡慕并渴望着。最后，是好结局哦～</p><p>这部游戏无愧于其taptap9.9的评分，也值得我连续两天熬至四点的期待。</p><p>《我在七年后等着你》</p><p>可玩性：1/5</p><p>音乐：4.5/5</p><p>画面：3/5</p><p>剧情：5/5（5是评分的上限不是这部游戏的上限）</p><p>总评：5/5</p><p><img src="微信图片_20241201223907.jpg" /></p><p><img src="微信图片_20241201223917.jpg" /></p><p><img src="微信图片_20241201223921.jpg" /></p><p><img src="微信图片_20241201223923.jpg" /></p><p><img src="微信图片_20241201223927.jpg" /></p><p><img src="微信图片_20241201223930.jpg" /></p><hr /><p>喜报：截至2025.1.2023:26，该篇评测在taptap上获得了155赞13回复1转发，并被选为嘴替发言。</p>]]></content>
      
      
      <categories>
          
          <category> Review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
