<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>for freedom and life!</title>
    <url>/2025/01/06/for-freedom-and-life/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不妨猜猜是谁的名字" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0564dad90fbed1cf21d8d3034bb603a5045b9dcd31ce404617ebaa1c155ac4ba"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">如你所见，我将确保全文出现了每一个人的名字</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>loner</title>
    <url>/2024/12/02/loner/</url>
    <content><![CDATA[<p>游戏名：loner/远方</p>
<p>很简单的一个游戏，甚至可以说是有些无聊，如若放到现在来让我玩，那我恐怕是玩不下去的。但放在高中竞赛那段时间，却可以说是刚刚好。</p>
<span id="more"></span>
<p>游戏的玩法很简单，操纵飞机穿过一个个障碍物，在达到一定的公里数时即可解锁一小段故事。3+1章全部解锁后，就没有新内容了，不过可以解锁“禅模式”，也就是没有障碍物，没有尽头的无尽旅途。想来，“禅模式”才是更符合游戏名的玩法。</p>
<p>76段故事可能反而更像是游戏中最重要的部分（当然不同人，甚至是不同时间都会有不同的理解），现在我有时打开这个游戏仅仅只是为了看一看这个故事。剧情并非多么的惊艳，但是
it's touching 。避免剧透这里就不仔细说剧情了（可看这里<a
href="https://xiex2024.github.io/2024/12/02/loner-story/">loner-story</a>），只能透露是反战题材的（笑</p>
<p>这并非是一个多么完美的游戏，但无论是玩法，画面乃至于音乐，都很适合一个人郁闷无助却找不到人倾诉时阴暗地在角落里消磨时光，短暂地脱离现实，孤独地前往远方。</p>
<p>《loner》</p>
<p>可玩性：3/5</p>
<p>音乐：4/5</p>
<p>画面：4/5</p>
<p>剧情：4/5</p>
<p>总评：3.5/5</p>
<p><img src="微信图片_20241202135004.jpg" /></p>
<p>tip:据说taptap上的版本收费且有很恶心的广告，建议在google
play上下载。</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>py_notes</title>
    <url>/2025/03/17/py-notes/</url>
    <content><![CDATA[<p>自用</p>
<span id="more"></span>
<h1 id="字符串处理">字符串处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;xiex&#x27;</span><br><span class="line">s1 = s.center(2)</span><br><span class="line">print(s1)#数字小于字符串长度则不做处理</span><br><span class="line">s2 = s.center(7)</span><br><span class="line">print(s2.index(&#x27;x&#x27;))#若填充数为奇数则左侧多一个</span><br><span class="line">print(s.center(20))#居中并填充使总长度为20</span><br><span class="line">print(s.ljust(20))#左对齐并填充</span><br><span class="line">print(s.rjust(20))#右对齐并填充</span><br></pre></td></tr></table></figure>
<h1 id="集合运算和处理">集合运算和处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setA = &#123;2,1,3&#125;;setB = &#123;3,4,5&#125;</span><br><span class="line">print(setA|setB)#并集，运算。而A.union(B)作为方法有同样的功能</span><br><span class="line">print(setA&amp;setB)#交集，A.intersectiom(B)</span><br><span class="line">print(setA-setB)#仅出现于setA的元素</span><br><span class="line">print(setA&lt;=setB)#setA是否包含于setB</span><br><span class="line">print(&#123;1,2,3,4,5&#125;.pop())#“随机”移除，但实际删除集合中的“第一个”元素，由于集合的无序性而称为随机，例如纯数字是会输出最小的</span><br><span class="line">print(&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;&#125;.pop())#此处即为随机</span><br></pre></td></tr></table></figure>
<h1 id="字典处理">字典处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict = &#123;1:4,&#x27;a&#x27;:&#x27;c&#x27;&#125;</span><br><span class="line">print(&#x27;c&#x27; in dict ,1 in dict)#直接用in所查找的是是否在索引中</span><br><span class="line">itemdict = &#123;&quot;item&quot;:&quot;banana&quot;,&quot;cost&quot;:24&#125;</span><br><span class="line">print(&quot;The %(item)s costs %(cost)7.1f cents&quot; % itemdict)# %(name)d可以获取字典中name所代表的值</span><br></pre></td></tr></table></figure>
<h1 id="人为抛出一条异常信息">人为抛出一条异常信息</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anumber = int(input())</span><br><span class="line">if anumber &lt; 0:</span><br><span class="line">    raise RuntimeError(&quot;You can&#x27;t use a negative number&quot;)</span><br><span class="line"></span><br><span class="line">from math import sqrt</span><br><span class="line">def squareroot(n):#牛顿法求平方根</span><br><span class="line">    root = n/2 #initial guess will be 1/2 of n</span><br><span class="line">    for k in range(20):</span><br><span class="line">        root = (1/2)*(root + (n / root))</span><br><span class="line">    return root</span><br><span class="line">print((squareroot(5)-sqrt(5))*(10**10))</span><br></pre></td></tr></table></figure>
<h1 id="面向对象">面向对象</h1>
<p>python为所有的类提供了一套标准的工作方法，但可能在一些情况下没有正常工作，如下：
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class fraction:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">print(fraction(2,5))#返回指向的地址字符串</span><br></pre></td></tr></table></figure>
此处__str__方法即为内置的方法，指示了如何将对象转化为字符串
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class fraction1:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.top)+&quot;/&quot;+str(self.bottom)</span><br><span class="line">    def __add__(self,other):#加法运算</span><br><span class="line">        top1 = self.top*other.bottom + \</span><br><span class="line">               other.top*self.bottom#\可以作为续行符</span><br><span class="line">        bottom1 = self.bottom*other.bottom</span><br><span class="line">        return fraction1(top1,bottom1)#可以加入用找最小公倍数的方法化简来优化,但这部分的重点不在此处</span><br><span class="line">print(fraction1(2,5))</span><br><span class="line">print(fraction1(2,5).__str__())</span><br><span class="line">print(str(fraction1(2,5)))</span><br><span class="line">print(fraction1(1,2)+fraction1(1,5))</span><br></pre></td></tr></table></figure> ## 浅相等与深相等
对于两个对象来说，直接==比较是比较两者是否引用了同一个对象，而非对值的比较
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = fraction1(3,5)</span><br><span class="line">b = fraction1(3,5)</span><br><span class="line">print(a==b)</span><br><span class="line">#建立__eq__方法，进行值的比较</span><br><span class="line">class frac:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.top == other.top and self.bottom == other.bottom#仍不完善，可能输入的并非最简分数</span><br><span class="line">a = frac(3,5)</span><br><span class="line">b = frac(3,5)</span><br><span class="line">print(a==b)</span><br></pre></td></tr></table></figure> fraction的完整实现 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gcd(m,n):</span><br><span class="line">    while m%n != 0:</span><br><span class="line">        oldm = m</span><br><span class="line">        oldn = n</span><br><span class="line"></span><br><span class="line">        m = oldn</span><br><span class="line">        n = oldm%oldn</span><br><span class="line">    return n</span><br><span class="line">class Fraction:</span><br><span class="line">    def __init__(self, top, bottom):</span><br><span class="line">        self.num = top</span><br><span class="line">        self.den = bottom</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.num) + &quot;/&quot; + str(self.den)</span><br><span class="line"></span><br><span class="line">    def show(self):</span><br><span class="line">        print(self.num, &quot;/&quot;, self.den)</span><br><span class="line"></span><br><span class="line">    def __add__(self, otherfraction):</span><br><span class="line">        newnum = self.num * otherfraction.den + \</span><br><span class="line">        self.den * otherfraction.num</span><br><span class="line">        newden = self.den * otherfraction.den</span><br><span class="line">        common = gcd(newnum, newden)</span><br><span class="line">        return Fraction(newnum//common, newden//common)</span><br><span class="line"></span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        firstnum = self.num * other.den</span><br><span class="line">        secondnum = other.num * self.den</span><br><span class="line">        return firstnum == secondnum</span><br></pre></td></tr></table></figure> ## 继承：以逻辑门为例
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class LogicGate:#超类LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        self.label = n</span><br><span class="line">        self.output = None</span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label</span><br><span class="line">    def getOutput(self):</span><br><span class="line">        self.output = self.performGateLogic()</span><br><span class="line">        return self.output</span><br><span class="line"></span><br><span class="line">class BinaryGate(LogicGate):#有两个输入的门（与&amp;或门），继承LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)#先调用父类的构造方法</span><br><span class="line"></span><br><span class="line">        self.pinA = None</span><br><span class="line">        self.pinB = None</span><br><span class="line"></span><br><span class="line">    def getPinA(self):</span><br><span class="line">        if self.pinA is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin A: input for gate&#x27; + \</span><br><span class="line">                            self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinA.getFrom().getOutput()</span><br><span class="line">    def getPinB(self):</span><br><span class="line">        if self.pinB is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin B: input for gate&#x27; + \</span><br><span class="line">                         self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinB.getFrom().getOutput()</span><br><span class="line"></span><br><span class="line">class UnaryGate(LogicGate):#非门</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">        self.pin = None</span><br><span class="line">    def getPin(self):</span><br><span class="line">        if self.pin is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin: input for gate &#x27; + self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pin.getFrom().getOutput()#即返回连接器所连接的上一个类的输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AndGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==1 and b==1:</span><br><span class="line">            return 1</span><br><span class="line">        else:</span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">    # 在BinaryGate 类中，逻辑门有两个输入，但连接器必须只连接其中一个。如果两个都能连接，那么默认选择pinA。如果pinA 已经有了连接，就选择pinB。如果两个输入都已有连接，则无法连接逻辑门。</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"># g1 = AndGate(&#x27;G1&#x27;)</span><br><span class="line"># print(g1.getOutput())</span><br><span class="line"></span><br><span class="line">class OrGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==0 and b==0:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NotGate(UnaryGate):</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        pin = self.getPin()</span><br><span class="line">        if pin == 1:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pin == None:</span><br><span class="line">            self.pin = source</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line">class Connector:#连接两个逻辑门，内部包含LogicGate的实例但不在继承关系中</span><br><span class="line">    def __init__(self,fgate,tgate):</span><br><span class="line">        self.fromgate = fgate</span><br><span class="line">        self.togate = tgate</span><br><span class="line">        tgate.setNextPin(self)#此处传递参数self,即让tgate的值设定为连接器这个类的实例</span><br><span class="line"></span><br><span class="line">    def getFrom(self):</span><br><span class="line">        return self.fromgate</span><br><span class="line"></span><br><span class="line">    def getTO(self):</span><br><span class="line">        return self.togate</span><br><span class="line"></span><br><span class="line">g1 = AndGate(&quot;G1&quot;)</span><br><span class="line">g2 = AndGate(&quot;G2&quot;)</span><br><span class="line">g3 = OrGate(&quot;G3&quot;)</span><br><span class="line">g4 = NotGate(&quot;G4&quot;)</span><br><span class="line">c1 = Connector(g1,g3)</span><br><span class="line">c2 = Connector(g2,g3)</span><br><span class="line">c3 = Connector(g3,g4)</span><br><span class="line">print(g4.getOutput())</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h1 id="算法">算法</h1>
<h2 id="递归">递归</h2>
<p>递归的三个原则为：</p>
<p>①基本情况，即无需处理就可以直接return的情况</p>
<p>②算法会改变待处理数据的状态，使其更接近于基本状态</p>
<p>③调用自己</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def toStr(n,base):#递归示例，转换进制。</span><br><span class="line">    convertstring = &#x27;0123456789ABCDEF&#x27;</span><br><span class="line">    if n&lt;base:</span><br><span class="line">        return convertstring[n]</span><br><span class="line">    else:</span><br><span class="line">        return toStr(n//base,base)+convertstring[n%base]</span><br></pre></td></tr></table></figure>
<p><img src="image-20250316214546049.png" /></p>
<p>基本状态为一位数，于是不断将原整数整除10</p>
<p>用栈来储存结果，那么python会将函数的返回值储存在栈的顶端</p>
<p><img src="image-20250316220244264.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rStack = Stack()#将储存的结果压入栈中</span><br><span class="line">def toStr(n, base):</span><br><span class="line">    convertString = &quot;0123456789ABCDEF&quot;</span><br><span class="line">    if n &lt; base:</span><br><span class="line">        rStack.push(convertString[n])</span><br><span class="line">    else:</span><br><span class="line">        rStack.push(convertString[n % base])</span><br><span class="line">        toStr(n // base, base)</span><br></pre></td></tr></table></figure>
<p>示例：汉诺塔</p>
<p>其基本思路是，若有n层，从a挪到c，那问题可以分解为：</p>
<p>n-1层从a到b <span class="math inline">\(-&gt;\)</span> 1层从a到c
<span class="math inline">\(-&gt;\)</span> n-1层从b到c</p>
<p>代码如下（五层为例）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#汉诺塔</span><br><span class="line">def moveTower(height, fromPole, toPole, withPole):</span><br><span class="line">    if height &gt;= 1:</span><br><span class="line">        moveTower(height-1, fromPole, withPole, toPole)</span><br><span class="line">        moveDisk(fromPole, toPole)</span><br><span class="line">        moveTower(height-1, withPole, toPole, fromPole)</span><br><span class="line">def moveDisk(fromPole, toPole):</span><br><span class="line">    print(fromPole+&#x27;-&gt;&#x27;+toPole)</span><br><span class="line">moveTower(5,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="动态规划">动态规划</h2>
<p>以找零钱为例，采用递归算法结果如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def recMC(coinValueList, change):</span><br><span class="line">	minCoins = change</span><br><span class="line">	if change in coinValueList:</span><br><span class="line">		return 1</span><br><span class="line">	else:</span><br><span class="line">		for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">			numCoins = 1 + recMC(coinValueList, change-i)</span><br><span class="line">			if numCoins &lt; minCoins:</span><br><span class="line">				minCoins = numCoins</span><br><span class="line">	return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63)</span><br></pre></td></tr></table></figure></p>
<p>问题分解为：（change-i）的最小硬币数+1，其中i为一枚硬币的面值，故而循环多次直到遍历每一种可能。</p>
<p>该方法的问题在于有太多次对相同方案的遍历，如下图</p>
<p>![]image-20250317153318112.png)</p>
<p>相同的节点出现了多次，而每次出现都会进行完全一致而冗余的计算，这大大降低了算法的效率。</p>
<p>对此我们进行“针对性”的优化，即用<code>knownResults</code>储存每个节点所对应的数值，在计算时先查找这个节点是否已被计算过，以减少冗余的计算。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def recMC(coinValueList, change, knownResults):</span><br><span class="line">    minCoins = change</span><br><span class="line">    if change in coinValueList:</span><br><span class="line">        return 1</span><br><span class="line">    elif knownResults[change] &gt; 0:</span><br><span class="line">        return knownResults[change]</span><br><span class="line">    else:</span><br><span class="line">        for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">            numCoins = 1 + recMC(coinValueList, change-i, knownResults)</span><br><span class="line">            if numCoins &lt; minCoins:</span><br><span class="line">                minCoins = numCoins</span><br><span class="line">                knownResults[change] = numCoins</span><br><span class="line">    return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63, [0]*64)</span><br></pre></td></tr></table></figure></p>
<p>在这里介绍动态规划（dp），与上述算法不同，在这个问题上，递归采用了更为系统的储存方式，其会储存从1开始一直到change的每一个值对应的最少硬币数。</p>
<p>对于每一个值，其需要硬币的最小值，来自于这个值减去一个硬币的面值后所有情况的最小值+1。如对于（11）来说，为（1）+1，（6）+1，（10）+1，分别对应减去的硬币为10，5，1的情况，因此代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins):</span><br><span class="line">    for cents in range(change+1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents-j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j]+1</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">    return minCoins[change]</span><br></pre></td></tr></table></figure>
<p>如果我们需要得到对于每一个值，在硬币数量最少的情况下所有硬币的面值，我们实际上只需要储存新增的硬币的面值即可递推得到所有的面值，修改代码如下；
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins, coinsUsed):</span><br><span class="line">    for cents in range(change + 1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        newcoin = 1</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents - j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j] + 1</span><br><span class="line">                newcoin = j</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">            coinsUsed[cents] = newcoin</span><br><span class="line">    return minCoins[change]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printcoins(change, coinsUsed):</span><br><span class="line">    while change &gt; 0:</span><br><span class="line">        print(coinsUsed[change],end = &#x27; &#x27;)</span><br><span class="line">        change -= coinsUsed[change]</span><br><span class="line"></span><br><span class="line">coinsUsed = [0]*64</span><br><span class="line">minCoins = [0]*64</span><br><span class="line">dpMakeChange([1, 5, 10, 21, 25], 63, minCoins, coinsUsed)</span><br><span class="line">printcoins(63,coinsUsed)</span><br></pre></td></tr></table></figure></p>
<h2 id="搜索">搜索</h2>
<h3 id="二分搜索">二分搜索</h3>
<p>正常的搜索方法时间复杂度为O(n)，若列表为有序列表，那在不存在于列表中时时间消耗会减少。而使用二分搜索，时间复杂度可以降到O(logn)。（注意如果使用切片方法（如下）可能不严格遵守该事件复杂度，因为python的切片操作的时间复杂度为O(k)，可以用计算下标的方法减少这一操作的事件复杂度）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def binarySearch(alist, item):</span><br><span class="line">    if len(alist) == 0:</span><br><span class="line">        return False</span><br><span class="line">    else:</span><br><span class="line">        midpoint = len(alist) // 2</span><br><span class="line">        if alist[midpoint] == item:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            if item &lt; alist[midpoint]:</span><br><span class="line">                return binarySearch(alist[:midpoint], item)</span><br><span class="line">            else:</span><br><span class="line">                return binarySearch(alist[midpoint+1:], item)</span><br></pre></td></tr></table></figure>
<p>但问题是，排序可能造成更大的负担。</p>
<h2 id="排序">排序</h2>
<h3 id="冒泡排序">冒泡排序</h3>
<p>冒泡排序多次遍历列表。它比较相邻的元素，将不合顺序的交换。每一轮遍历都将下一个最大值放到正确的位置上。</p>
<p><img src="image-20250327173026645.png" /></p>
<p>其代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def bubbleSort(alist):</span><br><span class="line">    for passnum in range(len(alist)-1, 0, -1):</span><br><span class="line">        for i in range(passnum):</span><br><span class="line">            if alist[i] &gt; alist[i+1]:</span><br><span class="line">                alist[i], alist[i+1] = alist[i+1], alist[i]</span><br></pre></td></tr></table></figure>
<p>其优势在于可以提前判断出是否已经有序（若一轮都没有发生交换），对于只需要交换少数次数的列表有优势，称<strong>短冒泡</strong>，但大部分时候是效率最低的排序方法。</p>
<h3 id="选择排序">选择排序</h3>
<p>其与冒泡的区别是不再以交换将每一个值放到正确的位置，而是对于每一个位置，找到未排序的最大值放入。</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def selectionSort(alist):</span><br><span class="line">    for fillslot in range(len(alist)-1, 0, -1):</span><br><span class="line">        positionOfMax = 0</span><br><span class="line">        for location in range(1, fillslot+1):</span><br><span class="line">            if alist[location] &gt; alist[positionOfMax]:</span><br><span class="line">                positionOfMax = location</span><br><span class="line"></span><br><span class="line">        temp = alist[fillslot]</span><br><span class="line">        alist[fillslot] = alist[positionOfMax]</span><br><span class="line">        alist[positionOfMax] = temp</span><br></pre></td></tr></table></figure>
<p>由于减少了交换次数因此速度快于冒泡。</p>
<h3 id="插入排序">插入排序</h3>
<p>最坏情况下的时间复杂度仍然为<span
class="math inline">\(O(n^2)\)</span>，最好情况下为<span
class="math inline">\(O(n)\)</span>，但采用了和冒泡以及选择不同的思路。通过不断地将新元素插入已排序列表实现排序。</p>
<p><img src="image-20250328161147281.png" /></p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def insertionSort(alist):</span><br><span class="line">    for index in range(1, len(alist)):</span><br><span class="line">        currentvalue = alist[index]</span><br><span class="line">        position = index</span><br><span class="line"></span><br><span class="line">        while position &gt; 0 and alist[position-1] &gt; currentvalue:</span><br><span class="line">            alist[position] = alist[position-1]#如果比该位置的数小就继续往前挪</span><br><span class="line">            position = position-1</span><br><span class="line"></span><br><span class="line">        alist[position] = currentvalue</span><br></pre></td></tr></table></figure>
<p>可以看到，尽管时间复杂度一样，但该方法快于冒泡排序，因为移动所需要的时间短于交换（只需要进行一次赋值）。</p>
<h3 id="希尔排序">希尔排序</h3>
<p>类似于插入排序，但通过一定的步长将原列表划分为几个子列表，将子列表通过插入排序后再合并。不同的增量下时间复杂度不一样，但介于<span
class="math inline">\(O(n)\)</span>与<span
class="math inline">\(O(n^2)\)</span>之间。其关键在于找到合适的切分列表的方式。看似要多次排序增加了复杂度，但实际上，再后期的排序中，各个元素已经相当“接近“正确位置，需要的时间也大大降低。换言之，只有最后一步才是”真正“的排序，而前面的步骤只是预处理以减少最后排序的复杂度。</p>
<p>如对于增量为<span
class="math inline">\(1,3,7,15,\dots,2^k-1\)</span>的希尔排序来说，时间复杂度为<span
class="math inline">\(O(n^\frac{3}{2})\)</span>；而增量为<span
class="math inline">\(1,2,3,4,6,8,9,\dots,2^p3^q\)</span>（序列满足递增且<span
class="math inline">\(p，q\)</span>每次最多<span
class="math inline">\(+1\)</span>）来说，其时间复杂度为<span
class="math inline">\(O(n\cdot\log n^2)\)</span>，证明从略，参见<a
href="https://blog.csdn.net/qq_36667170/article/details/103899517">希尔排序复杂度详细分析（翻译来源：Hans
Werner
Lang教授）_希尔排序时间复杂度-CSDN博客</a>。对增量序列的取法来进行优化相当有趣，但现在没有能够在最坏情况下也能达到<span
class="math inline">\(O(n\cdot\log
n)\)</span>的增量序列，甚至是否存在也不好说？</p>
<p>可以用另一种思想来理解：将数据存放在二维数组里，然后对每一列进行排序→直接合并在划分为列数更少的二维数组，并重复以上过程，当然，在实际实现中，仍然是一维数组。</p>
<p>通过代码来实现，举例：先划分为<span
class="math inline">\(\frac{n}{2}\)</span>个子列表，再划分为<span
class="math inline">\(\frac{n}{4}\)</span>个子列表……直到整个列表完成排序。代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def shellSort(alist):</span><br><span class="line">    sublistcount = len(alist)//2</span><br><span class="line">    while sublistcount &gt; 0:</span><br><span class="line"></span><br><span class="line">      for startposition in range(sublistcount):</span><br><span class="line">        gapInsertionSort(alist,startposition,sublistcount)</span><br><span class="line"></span><br><span class="line">      print(&quot;After increments of size&quot;,sublistcount,&quot;The list is&quot;,alist)</span><br><span class="line">      sublistcount = sublistcount // 2</span><br><span class="line"></span><br><span class="line">def gapInsertionSort(alist,start,gap):</span><br><span class="line">    for i in range(start+gap,len(alist),gap):</span><br><span class="line">        currentvalue = alist[i]</span><br><span class="line">        position = i</span><br><span class="line"></span><br><span class="line">        while position&gt;=gap and alist[position-gap]&gt;currentvalue:</span><br><span class="line">            alist[position]=alist[position-gap] </span><br><span class="line">            position = position-gap</span><br><span class="line"></span><br><span class="line">        alist[position]=currentvalue</span><br></pre></td></tr></table></figure>
<p>希尔排序是通过对插入的改良实现的，因此shellSort方法中调用了插入排序的内容。</p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>why not die?</title>
    <url>/2025/02/06/why_not_die/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="A phrase and a title." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1366e7e6ed1afdcc2f53edcf1ef4bdf12cc616ea7035499b0069ac6ffd38925b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">why author alive？</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>七年</title>
    <url>/2024/12/01/%E4%B8%83%E5%B9%B4/</url>
    <content><![CDATA[<p>我选择将对七年的测评作为第一篇博客，或许该站会变成个人的游戏评价收集处。(笑)</p>
<span id="more"></span>
<p>以下为正文：</p>
<hr />
<p>心绪难平。
我很难评价这部游戏，公正地说，它的游戏性极差，比同类型的《to the
moon》还差；我无意将它的剧情封神，但至少在我这里，它的剧情水平接近甚至于超越了去月球。剧情的逻辑毫无漏洞，我原本以为它忽视的东西在最后的最后忽然提起，并成为了扭转局面的关键。</p>
<p>前十五章可能略有些无聊，但中期到后期的处理十分紧凑，每一章结尾都会是刀子或者反转。当在主要故事末尾出现两人相逢时我终于嘴角出现了笑容，但此后超过十个的ep又一点点温柔地展现了残酷的真实……剧情中的伏笔数量超出我想象，许多我以为只是闲步的对话在数十章后突然得到了解释或者利用，即使是原本并不令人在意的配角也隐晦刻画了背后的故事。
游戏中交织的友情，爱情，亲情……感人至深。春人与葵，17711个七年，当葵在漫天的纸屑配合着戛然而止的bgm下说出那句台词时我的心脏仿佛也骤停了一下。
（试图对感情线评判但是失败）两人之间的这种信任简直是一个奇迹。即便最后两人不再有交集，但春人仍然没有失约。这种程度的感情或许并不现实，但我仍然羡慕并渴望着。
最后，是好结局哦～</p>
<p>这部游戏无愧于其taptap9.9的评分，也值得我连续两天熬至四点的期待。</p>
<p>《我在七年后等着你》</p>
<p>可玩性：1/5</p>
<p>音乐：4.5/5</p>
<p>画面：3/5</p>
<p>剧情：5/5（5是评分的上限不是这部游戏的上限）</p>
<p>总评：5/5</p>
<p><img src="微信图片_20241201223907.jpg" /></p>
<p><img src="微信图片_20241201223917.jpg" /></p>
<p><img src="微信图片_20241201223921.jpg" /></p>
<p><img src="微信图片_20241201223923.jpg" /></p>
<p><img src="微信图片_20241201223927.jpg" /></p>
<p><img src="微信图片_20241201223930.jpg" /></p>
<hr />
<p>喜报：截至2025.1.20
23:26，该篇评测在taptap上获得了155赞13回复1转发，并被选为嘴替发言。</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>你的颜色</title>
    <url>/2025/02/22/%E4%BD%A0%E7%9A%84%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>我对音乐和绘画都没有特别的喜好，因此这部作品于我而言虽毋庸置疑是一部好电影，但或许震撼感并没有那么强。</p>
<span id="more"></span>
<hr />
<p>作为商业片的话，这似乎并不是一部好作品，剧中的冲突显得轻微而温和，也并没有那么多小高潮能不断地调动人的情绪，抛开轻微的百合向不说，貌似没有什么能夺人眼球的特点。但是，它确实，从结果上来说，也让我这个对音乐和绘画兴趣不大的人能够一直看下去。在我的想象中，看这部电影理想的场景应该是：在某个阳光明媚的上午，舒服的坐在（躺在）书房的躺椅上，阳光能照在身上，我心平气和地在电脑上点开这部影片，带着降噪耳机在不被人干扰的情况下消磨掉一上午。整部影片的氛围于我确实就是这么休闲。</p>
<p>细节之处反而让我印象最深。声音和颜色像是这部影片的特点。单说声音，电影似乎着重放大了那些细微的声音：火焰燃烧与熄灭，雨滴落下，脚步，呼吸，翻书，乐队使用的那些接线连接时的声音……如若不是我的错觉，那这些效果似乎也暗示了窦子对于声音超乎常人的感知天赋。当然，末尾那一幕白噪音和背景音的突然消失也是一种常规但有效的声音手段。</p>
<p>而作为影片名字的一部分，颜色自然也是亮点之一。从我的感官上来说，色彩鲜明而不激烈，感觉十分舒服。不知为何，收音机那一抹红色令我印象深刻。而作为三人组的颜色，红绿蓝恰好是光的三原色，不知道是否是有什么隐喻？其实我一直觉得橙色或金色这种太阳的颜色可能是窦子的颜色，但结尾她翩然起舞时看到的正红带来的震撼绝对是这两种颜色无法比拟的，而一旦知晓了她是红色，那也就觉得红色确实最为合适了。而作永和路易这一绿一蓝更是怎么想怎么合理。</p>
<p>其他方面，很高兴没有把窦子能看到声音的颜色这一点作为“异能”着重描写，很高兴整部作品没有对感情线太多的描写。</p>
<p>是好电影，但我确实无法对剧情有很强的共情</p>
<p>总评：4/5</p>
<p><img src="微信图片_20250222233856.jpg" /></p>
<p><img src="微信图片_20250222233905.jpg" /></p>
<p><img src="微信图片_20250222233909.jpg" /></p>
<hr />
<p>P.S sorry ，窦子，一张你都没拍到</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>film</tag>
      </tags>
  </entry>
  <entry>
    <title>画中世界</title>
    <url>/2025/02/17/%E7%94%BB%E4%B8%AD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>游戏名：画中世界/Gorogoa</p>
<p>很有意思的解密作品，精良而小巧。</p>
<span id="more"></span>
<p>也是一两年前玩的游戏了，剧情简单而隐晦，倒是没什么好说的。但该作的解密，构思以及美术精巧至极，常常又令我拍案叫绝之处。</p>
<p>游戏的主要玩法是通过画面的移动，重叠，视觉错觉实现解密和进程推动，少数的彩蛋也能让人眼前一亮，玩起来的感觉有种驱动精密机械运作的感觉，环环相扣精妙绝伦，兼之游戏流程较短，很容易让人一口气通关。</p>
<p>游戏的难度中等，循序渐进但不乏大开脑洞之处，但各种谜题十分合理，正如前文所说：”精巧“。</p>
<p>手绘风格的美术令人眼前一亮，用来衬托全作庄严而孤独的氛围恰到好处。当循序渐进的音乐配合着游戏结局时的恍然大悟，总会有一种孤独而荒谬的感觉，美术风格对于结局时那种略带宗教恐怖和克苏鲁的画面也是十分自然，”来自东方的神秘力量“刚好可以用来形容这部游戏给人的感觉。</p>
<p>《画中世界》</p>
<p>可玩性：5/5</p>
<p>音乐：4/5</p>
<p>画面：4.5/5</p>
<p>剧情：3/5</p>
<p>总评：4.5/5</p>
<p><img src="Screenshot_20230604_171258_com.xd.gorogoa.tap.jpg" /></p>
<video muted controls preload="metadata" loop="loop">
<source src="SVID_20230604_171538_1.mp4" type="video/mp4">
</source>
</video>
<video muted controls preload="metadata" loop="loop">
<source src="SVID_20230604_171301_1.mp4" type="video/mp4">
</source>
</video>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>紫罗兰永恒花园</title>
    <url>/2025/01/30/%E7%B4%AB%E7%BD%97%E5%85%B0%E6%B0%B8%E6%81%92%E8%8A%B1%E5%9B%AD/</url>
    <content><![CDATA[<p>花无凋零之时，意无传达之期。爱情亘古不变，紫罗兰永世长存。</p>
<span id="more"></span>
<hr />
<p>纯洁，纯粹的爱。</p>
<p>美好到任何人都不愿意亵渎的情感。</p>
<p>很高兴最后是happy ending，即便仍有遗憾，但已足够美好。</p>
<p>如若有一天忘记了剧情而再次看到这寥寥几句话，希望你重温这段故事。</p>
<p><img src="keyvisual02.jpg" /></p>
<p><img src="keyvisual01.jpg" /></p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>film</tag>
      </tags>
  </entry>
  <entry>
    <title>红辣椒</title>
    <url>/2025/03/31/%E7%BA%A2%E8%BE%A3%E6%A4%92/</url>
    <content><![CDATA[<p>《红辣椒》其反映和蕴含的社会现实和暗示过于丰富，以至于笔者完全无法详尽的写出，于此留下我第一次观此影片的感受。</p>
<span id="more"></span>
<hr />
<p>最近看的几部电影都更类似“叫好不叫座”的类型，无论是《你的颜色》，还是《猫猫的奇幻漂流》都属于那种艺术和文艺色彩较为浓厚，相比之下故事性和吸引力逊色许多的作品，其针对的人群似乎更狭窄因此评价也就更两极分化。</p>
<p>而《红辣椒》并非，即使作为上个世纪的作品，其各方面在今天也能称得上极高的水准，甚至如今仍能在网上看到的许多名场面也出自这篇作品。较为专业的观影者和评论人可能可以从中看到反映的社会现实和导演与原著作者的一些思想，而业余观众也可以从高潮迭起的剧情，瑰美华丽的画面，目不暇接的巧妙转场甚或是与电影相得益彰，恰到好处的配乐中感受到这部电影的伟大之处。</p>
<p>作为题材类似的作品，《红辣椒》的严谨和易懂显然不如《盗梦空间》，但内蕴之深厚，想象之丰富，画面之华丽，音乐之出色却又令人印象深刻得多。作为一部动画片，其对梦境的诡异和扭曲的展现反而会更贴近真实。大量出现的荒诞甚至略带诡异的场景足以让人感慨绘画者的怪才。</p>
<p>正如我开头所说，“其反映和蕴含的社会现实和暗示过于丰富，以至于笔者完全无法详尽的写出”，我尚不能完全理解电影所表达的内容，但就那些显而易见的暗示已经足够我再写一段话。首先，同性恋。在影片中出现了至少两个同性恋者，其特殊的性取向对于故事的发生和推动有着极大的作用。以及，女主“Paprika”的特殊的“治疗”方式——即以交合的方式帮助男性治愈精神疾病在影片中亦有暗示。以及，在影片中多次出现的梦境现实的切换，其标志在影片内明明白白的告诉了观众，但标志却又不是完全出现在影片内——即拍摄视角的越轴导致的不自然感——这一点相当有趣。</p>
<p>以及音乐，也是本片的一大亮点，以游行的配乐为例，导演今敏要求“盛大愉悦但就是让人感觉不舒服”这种甚至可以说苛刻的要求，但平泽进先生给出的成果简直堪称完美。（这一段是看的解说，虽然我自己看确实感觉配乐相当的好但显然描述不出来）。</p>
<p>红辣椒Paprika确实是相当有魅力的主角，虽然我说不出来为什么这个角色的吸引力如此之大，但就角色塑造来说，显然是成功至极。当然，无法排除林原惠美小姐也是Haibara
Ai的配音的爱屋及乌的因素。</p>
<p>可称神作的一部电影。</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>film</tag>
      </tags>
  </entry>
</search>
