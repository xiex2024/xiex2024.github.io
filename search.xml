<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>for freedom and life!</title>
    <url>/2025/01/06/for-freedom-and-life/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不妨猜猜是谁的名字" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0564dad90fbed1cf21d8d3034bb603a5045b9dcd31ce404617ebaa1c155ac4ba">0e1072da1f8eff08381e9ed80bc34dce2c3b8b087262537e1e5a059350228a0e98e1df1f0fefc75f342bb53a76f8d675345c21d003b83cce6c421706fadb6ec8687037445a7bf0de69e53c9efaaa4d841a8946b494b71988d3f3053302947faf537d500126eaec820a8b6e84700644adcf924abe88ff07b8c7eb7bda6de97131abc4b2f9f1a66983a39abd168c067ce47c4c14513621a71690e2fc76ff2316903da60464b5758815b1d803423e0e10cb373b2d730a21b6faf5f2f15ba3821e1dd037b4d1c3460230b8f0eaf1f5a6038a8bd29a0caa6c3f227c5dce724b9a19660a6c138d9ff0a1a47549435a8481e793647c98a16a69de329ee77c6659785162063d4d4e82abce6bd16b06dd704b2d91c315d2a069349f7c201995f528de1ee81d2437d3f0744b530f700de03adc20d054699c6c657b5deac71c30cea9ff7427ded6d94e51a0ba28dedc52c168b51c6633f64141b17eadeadc80f33c5452a7e94e1643045aca081d3386fa5750b1bf985f98444198c5a83669554405921dd529810cd7e111870fcf0044f071330f9e3413d076ab61031001f61bed1101cae1729529430822aa735a51350101f178af0e84dcbee774c1c923650e2f3d84f74af0f976b1c41f0c00c8d95334ccc311c82d37c4f145b134bb99109e08305823e755f7514da313485826b6d4f9fb0aa1e3d84c792d65c6735e51f6f47a3004d1ec6e7253453161c042ec5ce0ab84080708b950b947a7401de57edbace69d931c4e216a80dc70f4baf1ba35f9103d2687c806c46af7e122ff28d5717b64c11be8d6c111dd59ba48d9a8c887bd027c3444db2aef40262a2be55f3c5bd895d326c991a6640ae7131d5671b573ac9320317c9e1a68b71264bbfa954349c560aa888445a06ac4e722c0c958a25d5ea120a9d4287e8414ec930f4b42bdfeaa1efddc6aa6fb580f507dde7d551d58adb6d11c15e7f8d091f6a16ee109d5f48b6c00970bf40295e166ba280d35dbc61a1e95c33b3776464e76a9f48594715cddc3598b67707033c3b6c3dbc877542fcbe2943e53b93e6cc32f5334e0079d65f2658ad2de6b817e69bc264eeace2b126f9d7d4dc55f9089145e53af9a0b89cd098e567c259a55925f92ac3722003fbc7b55ffe167a8452dc2abff9100e5cb18e4c518debedfadc9fb9ecce0cdbd10933df28665ed64b2be1e456be7c5cb65b1fc23d34e094b442edb4fa987024092136fefda5c12c5b6567998a9cdb66f9fd9c0500a893dfe895f38f9ae6fff1e80b62b37a0de18f9849a8d15c94c62b2717b2ede77faad69900c082fab96f77a19823e5586f0d63b47883fc672fe2c40fc7436001df42f729ddcbf9f7e5126d8047964147457f4d44f0faeaebe3b5c258cf56e5808d62fdfa91513003ce6ee74b3bcc49800bf6b0a2c75346c33e67fb244e8bcb4b400a60be84ebfc6f6f7a85331f3356908245dbccc0c10854b50cea199485be4bd18a56224503a2e35fa22ff1fcc1e1a54dc10abb53f166b45ac11c2ff40393f926e9feab3235c6620b3ae9a78d36e447c2633bdd96eafc77a8d5cf5b1e85ceecf0b58116fe17851968aa41923183839b1c07f556ab17731a6c77156c5ec32f69ad9ca30ad501f9865afab147c11d90109ec33c003fee6034622c74cd5c5b4248563ebf391748c95a0ed1c73dbccefd93baeef8dc56c58bca42d9fc266daf44b1b48fa4843c8aa841c3a830b63ac75dbf68568c2d59069767fac39a7902b7dcffd4ca3e25bb1de2d2807137e1ab7387b6822e8749f977533cd343ea40ea8eb7f55497b6fa65279055f58a3c1e6643e7420fa27e4a0edb402d0ed3da56c35b125538aac0b16451a76a5c342dbfe5086adeda10798b35a52901d729ebbfaf897914fa736e738979df4c12e99bb776b19f0042bbc940aabf90ff9ab02874374d56c2619379e5894e4edb5131a416d6c7daccd58c18edf3c100e76c444dc53c9acccdbd798e2c3cbba477ce2e576bf8a20ac7481912ad2181f00d70b036ca4a63eebe01a4d95c0778df0c99ac0563a430bf0141b7973d94a3dc5333b982659aefe7f910235932b3afb10ba21bb695dc6ff1cbbe82c2d69c90d95096c480f8ac7e3296f3e871e53ff9f495642fdf377dfbd6f646afa69363e74980796c84dbbff63ab172070dbd1afe19c2c7cee2778c0b780ffaec5171433ad7256a3fe3332623cd92d4c84fc0a930e1b90c514c2de5ed957f2fb7554dda75eaeb00896a24c68d6510846658bf57cfb504c3d39c481b44ba245cb8bb879359cd948121fc78b742ac5784d47809523fdf424149f1bd7acf027d90fa8180505171de848819903561a84c7682d0e09df834003834bf98c092c59dc7b9de8bcfc7c0187c2a4009473b909840dd8c7197553c9663cb62726388b91f69a05fba48ef79c29a92f3ade45b092dea11b2b7338d8d16d6761c4aaf1e75983ea64f1a7e76d383e0e28593d9f7e95f19b4c71b3f1af6e4053a981c2b24c910a4db00ba7430bd010e553e64494f31d6012e881e1e90f47e9a08cfd2985af6cfce029f637af3ffe736fb777c7a7e8f78cb6e1594ecd29034ac272be385988bc1f67253ccb140a4928008340bbc5d645b1952f2512a7c6e73b9dfeeb408583d9a7810669e199d8aa9f8dbf75015aab29b86a2f273b98d3ca12ef2105540eadfcd344c30811d4213e8021e17af0df8114814edcc495840f95acb968cf28d4b78d28839e166c5bbbbce269f8f5c91835bc6a46ca68bbd927e1abff9c5422b5473c50af8bf186aa577b7e5740920be476e04e0e629e072c96566fe3d083908655221d3af1d223314c386f04851e9b2bade82f6317558e4b9a57de00e9f69a032378a456f4d962156f1f2cc0f79c9acd101d5b4030ec0dd83fabbe08d8a5088495b200f0ea0acdb40b5a5500767fbd437b070bce11ca6569c23555ade348f5cb070c22d955e78c32c1cace38836ab0a8a633fb9bbe208c44abac680a2116635ce479230cc9467fff4aab931f5221b434141e42adbeb28a0b6c017a8b4df4c18f0150bb58d233a11b87abf0a6de39110a6594c514443c62c125736adc673b42cd4e61327e549510b7d6fa44547757c4b5e396c767cf2830166229c6168b2f1ac02d0bd30235f68bcbf0096a6c35a1d07b323f5643af330eb9ab7b794fc764c992e4b8c85c6245951bd634d2cf6142360b2812a237544d94bf5e5a5073adf05973daaec16821be26649caa0e7db3646d69617c259c1c2cb6ec5b7f31f4d5392447d7af1b6250a9739485ba5f1dad41e08aa2917bd0a128dc0cc89173c818c0fb1b117022835c6b8bf9a80f8d7d070683a135959ea854fa41eb5c049f791176fcfd4baa7c897c9ea3f218163118412fcada4693e7f424bccd3c62777a9a4326dfa67a1687e0fa07e7b5bd1d054dcc93fd01058d81a83f2d26349a5071090ee2f187bab708341cc5452390232212b2dd261e3c5d016eef46c42da10ff5f71d9d287a0ab272ac3837f1d2f658c947f7e7f42ab083cf82f03da27e44df082a4240e9ec1df52ca8b1f1412c3a8398ca1e9e8db173d9df57ff02e532c33278b115fa88e832c48bbd6de0b9f40a6a21759970fe2f3bedc1fc614c77ef5a9501d9dd9a3980c0e32164821d3326e4c2fcc74580b9956d89893a6353d80421da4155419d92c0aba56d95d25f3180336ba70153f938e96f83b15ff35a1e22336caf242804455c85b3e2f291e13bf1439428f78a9799559ff73579ce0e2b1d7c70203098cd15a4b5bb065bd85b197b6d676eca9f382dc74d2bef8b6c5adfb7249215c7cc3b86c4d586845ea594c0a8fd5413b0c73a603838a711f45ca996e59802e8f1da86296bd48ef6d30c8ad0a2de5eb736db12bad5aa7b7c2a8225cc506021e1ea013bbbc6a71555917dfbdebbcc493dc34264b7c4bb949d49d649b62d5319579dd259332fc8cdc5f35890249de717db58986cc2253fdb184123c7e23ef3d2c9f068d79f15ef0a1da563a7e00ab989dd351c348820c96b5c819bdeb1d1bfa13583ad6e5554f5e03cf161f332816541ca99451ff48c4f1a028d897093ba62dfff6898557a487fabb8d170d47884b5626ee6fe9907a60a3f7a789701e96d989edcb8eec6be7a931d3a0dfc60eee8cf8ee4211dcaff7e3543a7905fd4989f8a070b73d6be2b54107698617ec5d3d5e0e872c5226502015b45a22f1aab34bd6ac5e24809f527561f305ae978b503e7461473fd1acec156d761b59fefde72677e6d59ece5e1fe372c36ae6397243a9fc0b97c6f4ff41a6f2a234f607022075c7e723c4ee54e4c119090f9597d291a22150e3d60592a7d88ab96b4706f1dcf6e6417c57c6dd1a9981de30665496d5216501bbf3a02b11bf31f427b1bf76203323885fec83660ca907653c325384a26acfbd14d6d6b2eb1eca9fc743a6fd3a32f4c40f99bdd6761db2b5a9629d3e0ad32b5e6a5eb9d94aabd9d5c0732115fa692150c6c7f71a4e3353f68bea73ed8d2e6aa6951070a69a30a4ba248dcd37d2c3e2a1566e191df3b7fe2a245f40ed8a1f0ff9f0f1a8c9bb42bf8c4f3e476eb29f78899cc35088475f8b33811196a5e0b33a32c3091cfc54c9e8f2fe180b7d10a3b83fa9543cda1ca1816dd35d8eaa42f61fd1f1d893edd51805dab2a57c8fe5995eeb17ad41ec7c07476e67b08d8deafac33bfc07f18465335881392c1630d7f2b1dd394af5b22282faea6643e8abee32d5312be1cf6fe20cac6f123fd133621cc211ece21b6a296433d38ac908d79cc254699837cec9f726c192fe90c625bcd7c4a30245d5ac92bcb69fe18eae744501a67efcd83dd31ca8f247cd31e06c2afcabb85b6fa52f005bee6f5e226943f49617e707f8054c5f91d7cbbd153950a27823dd5bd94d88d66104e985f2b0c7f7565d24495c1c67d0f592d062319d44177611c17b1bb903274419d7e508358a47dd9f7d25ab4d9a9cae117df4606c51653607c2728c2213e577349c70a5de6ed6baa0771c08686f6e4cf5599f015fc2c633968fe2d21194d309e5fd4fcf5d37c9dd5d62d4c4643910a7c0d6c646b7b4e232c863ecd84e4b2cd0d0e0c7303a6e97a64a427a63eb8bdc8434fbcbd734968b3aa1fe188b68bd67af4671a03c8e55c28faa2ea0ceb6b152ef901a471646a250c0c4f7ed8d907832d5a0dcb9bf2c10318d011b8b8cb79ecda0871e0f67f2600687ca58aa71d709ec190dc0ff8b5c80e7ddf900ecb7b1292235e5a98e14ca9d4d6f5e476789a3adef5ea00514913ef9edb90df9d341a5d37b22b0e6e74f79a11db47a8975afa23cd20367e54bd58276cc84118c9698034a0e51b75744981e7069331f2a31353786f58eadfaf3f769145aeec7817ae49cf71c09f8f3dff4b83dce764d0b8abfd1cb7823b795eeb4bf1af17ae0a9a8835c8347001b0b3a5ee78243dddeddf0646a400e4937e31446049a7117252238736896d5b053ff2e2198d8d105ea4482b0a6dd733736b6e15c2ebc157d9ae3c0bc7f6ad8b1b206e6149afbd5dcd4749b594119af48267c8cfac17289b18ff0874971d4cbf67ed64f12f5f6405204809398064a76c1f105797014936ba2ef069201d74c6948c6c5187a403cd658abb748db76b91603d4f2fdca9671d4d8f8741bd6687e7cbcc6255e644dc5d86fc1aac9ab94105fd452d9b4fc2859f464f10d58956de17a906ee5235e9b846b8ae02d9473ce0a2a33fbe4beb548406d078b8e72f082bd446da77d3bf8ca2b84c5f313bb6523ad185a32558a3536273baa55650dcfc15454c211c5321225343d5439e142c3ee1928be63db0f8f11971e3854e6a46fe085b74958f1ec04c83c6fb6cff5843e3ccbf2f3040195c293d4933f58643304e69c35f6ba0a11e6200b1ea4dbe56e3db3a9d119979222d6e9aea82030d91df752c5cc18983b48ebe978878d4d348514343a86f6c868f0e60018c85213496926f690ed59901ba3a1898536e7a9d8a372adad1a205810e827e91dff293a118a479e30be94b8013b5f6acb98da3b7beb6e2bae16ee6f5916942e931c3734700c4fcc83fccadb3f87f202c36b5264926b7dc2cfb2738168ad5272033c4e319c75f7c0bd79ad9521b952563b6f26c241a86d4dce6f359f7c3d42ce7683509e44eb5ed4a86a2fe3aa668a90d004198facc10917e9b6051cf54168b5d81fe5138084c9cdcc39c636575f889782c3aeba41d26a794f839bc5d2e5cf9a122ca8130782729c78c146a2c2937f5c8bae24f767704894d9bce5ac746bbc8ec72b3bea1c8d0775bddd8033aefe5f27600ed648410c7357b4a271fd5bbd15b744159a4f89db37c14ebb7ec03830129b9294751bd8431e68d02090045fbee76978e91b56956b62dfde15aeeb284141b74d7b970e3552a0207129d15c48ec7d0908b3fe04a5fe84d023501e09cfcbe3bf13e576c1e6c862bcb1a62238716f6f5979202941c2c2a398bec62290a1408f32ef41d9144243bfb47ed996c7c3ab90bad94bca00ba6b73147ba71388fd4755a2dcf61eecf42f16d8e1ba224366c791c93782e122ab1e2b4b643b68721cec71494441ed0c2d9e64c625456033263db44cd728e7aff95e21d4ff02456d27a8b11a6583bf0981c5fe112cd2b09e4d14fec74cfe63746e216feffd2bc22610c75688731aa1f0af19164bd902bf7509dbb349859d1e2dddc5cfd8ff906187043baa65a2a0f7de60157c130cd5ae8e0e5bfaad86164ebf3090013354966b7d0c451994476c1a06f9fe99c28d71973a37d94bf026495cfd40b82f68af1b6ae972773861c4136656374b310d187ff8e587e01c7535c79c0a0d51828c864892891a78b6b9124d336feb5a35f1e8108e28299addaec04d1632412b228dfe9cc9e76340d712ea44abc9f3c99ce403456af62e805eba3980e1d218c13c63c55d014db0a2dc4c1d1f45fe442cb8f0e92cabc9c1cc4f51020fd4a53a2786138001c010921655b587914dadf668a948eec85740a27d58e4e6487b8df5c355e195c49754d48fe4c7bec74654607c7ec485e0108e991b5ab797e2b82abe55b4eb44660675e20de2256790e2637ca9390bbfc41f642eaf6be48f445</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">如你所见，我将确保全文出现了每一个人的名字</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>loner</title>
    <url>/2024/12/02/loner/</url>
    <content><![CDATA[<p>游戏名：loner/远方</p>
<p>很简单的一个游戏，甚至可以说是有些无聊，如若放到现在来让我玩，那我恐怕是玩不下去的。但放在高中竞赛那段时间，却可以说是刚刚好。</p>
<span id="more"></span>
<p>游戏的玩法很简单，操纵飞机穿过一个个障碍物，在达到一定的公里数时即可解锁一小段故事。3+1章全部解锁后，就没有新内容了，不过可以解锁“禅模式”，也就是没有障碍物，没有尽头的无尽旅途。想来，“禅模式”才是更符合游戏名的玩法。</p>
<p>76段故事可能反而更像是游戏中最重要的部分（当然不同人，甚至是不同时间都会有不同的理解），现在我有时打开这个游戏仅仅只是为了看一看这个故事。剧情并非多么的惊艳，但是
it's touching 。避免剧透这里就不仔细说剧情了（可看这里<a
href="https://xiex2024.github.io/2024/12/02/loner-story/">loner-story</a>），只能透露是反战题材的（笑</p>
<p>这并非是一个多么完美的游戏，但无论是玩法，画面乃至于音乐，都很适合一个人郁闷无助却找不到人倾诉时阴暗地在角落里消磨时光，短暂地脱离现实，孤独地前往远方。</p>
<p>《loner》</p>
<p>可玩性：3/5</p>
<p>音乐：4/5</p>
<p>画面：4/5</p>
<p>剧情：4/5</p>
<p>总评：3.5/5</p>
<p><img src="微信图片_20241202135004.jpg" /></p>
<p>tip:据说taptap上的版本收费且有很恶心的广告，建议在google
play上下载。</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>py_notes</title>
    <url>/2025/03/17/py-notes/</url>
    <content><![CDATA[<p>自用</p>
<span id="more"></span>
<h1 id="字符串处理">字符串处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;xiex&#x27;</span><br><span class="line">s1 = s.center(2)</span><br><span class="line">print(s1)#数字小于字符串长度则不做处理</span><br><span class="line">s2 = s.center(7)</span><br><span class="line">print(s2.index(&#x27;x&#x27;))#若填充数为奇数则左侧多一个</span><br><span class="line">print(s.center(20))#居中并填充使总长度为20</span><br><span class="line">print(s.ljust(20))#左对齐并填充</span><br><span class="line">print(s.rjust(20))#右对齐并填充</span><br></pre></td></tr></table></figure>
<h1 id="集合运算和处理">集合运算和处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setA = &#123;2,1,3&#125;;setB = &#123;3,4,5&#125;</span><br><span class="line">print(setA|setB)#并集，运算。而A.union(B)作为方法有同样的功能</span><br><span class="line">print(setA&amp;setB)#交集，A.intersectiom(B)</span><br><span class="line">print(setA-setB)#仅出现于setA的元素</span><br><span class="line">print(setA&lt;=setB)#setA是否包含于setB</span><br><span class="line">print(&#123;1,2,3,4,5&#125;.pop())#“随机”移除，但实际删除集合中的“第一个”元素，由于集合的无序性而称为随机，例如纯数字是会输出最小的</span><br><span class="line">print(&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;&#125;.pop())#此处即为随机</span><br></pre></td></tr></table></figure>
<h1 id="字典处理">字典处理</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict = &#123;1:4,&#x27;a&#x27;:&#x27;c&#x27;&#125;</span><br><span class="line">print(&#x27;c&#x27; in dict ,1 in dict)#直接用in所查找的是是否在索引中</span><br><span class="line">itemdict = &#123;&quot;item&quot;:&quot;banana&quot;,&quot;cost&quot;:24&#125;</span><br><span class="line">print(&quot;The %(item)s costs %(cost)7.1f cents&quot; % itemdict)# %(name)d可以获取字典中name所代表的值</span><br></pre></td></tr></table></figure>
<h1 id="人为抛出一条异常信息">人为抛出一条异常信息</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anumber = int(input())</span><br><span class="line">if anumber &lt; 0:</span><br><span class="line">    raise RuntimeError(&quot;You can&#x27;t use a negative number&quot;)</span><br><span class="line"></span><br><span class="line">from math import sqrt</span><br><span class="line">def squareroot(n):#牛顿法求平方根</span><br><span class="line">    root = n/2 #initial guess will be 1/2 of n</span><br><span class="line">    for k in range(20):</span><br><span class="line">        root = (1/2)*(root + (n / root))</span><br><span class="line">    return root</span><br><span class="line">print((squareroot(5)-sqrt(5))*(10**10))</span><br></pre></td></tr></table></figure>
<h1 id="面向对象">面向对象</h1>
<p>python为所有的类提供了一套标准的工作方法，但可能在一些情况下没有正常工作，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class fraction:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">print(fraction(2,5))#返回指向的地址字符串</span><br></pre></td></tr></table></figure>
<p>此处__str__方法即为内置的方法，指示了如何将对象转化为字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class fraction1:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.top)+&quot;/&quot;+str(self.bottom)</span><br><span class="line">    def __add__(self,other):#加法运算</span><br><span class="line">        top1 = self.top*other.bottom + \</span><br><span class="line">               other.top*self.bottom#\可以作为续行符</span><br><span class="line">        bottom1 = self.bottom*other.bottom</span><br><span class="line">        return fraction1(top1,bottom1)#可以加入用找最小公倍数的方法化简来优化,但这部分的重点不在此处</span><br><span class="line">print(fraction1(2,5))</span><br><span class="line">print(fraction1(2,5).__str__())</span><br><span class="line">print(str(fraction1(2,5)))</span><br><span class="line">print(fraction1(1,2)+fraction1(1,5))</span><br></pre></td></tr></table></figure>
<h2 id="浅相等与深相等">浅相等与深相等</h2>
<p>对于两个对象来说，直接==比较是比较两者是否引用了同一个对象，而非对值的比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = fraction1(3,5)</span><br><span class="line">b = fraction1(3,5)</span><br><span class="line">print(a==b)</span><br><span class="line">#建立__eq__方法，进行值的比较</span><br><span class="line">class frac:</span><br><span class="line">    def __init__(self, top,bottom):</span><br><span class="line">        self.top = top</span><br><span class="line">        self.bottom = bottom</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.top == other.top and self.bottom == other.bottom#仍不完善，可能输入的并非最简分数</span><br><span class="line">a = frac(3,5)</span><br><span class="line">b = frac(3,5)</span><br><span class="line">print(a==b)</span><br></pre></td></tr></table></figure>
<p>fraction的完整实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gcd(m,n):</span><br><span class="line">    while m%n != 0:</span><br><span class="line">        oldm = m</span><br><span class="line">        oldn = n</span><br><span class="line"></span><br><span class="line">        m = oldn</span><br><span class="line">        n = oldm%oldn</span><br><span class="line">    return n</span><br><span class="line">class Fraction:</span><br><span class="line">    def __init__(self, top, bottom):</span><br><span class="line">        self.num = top</span><br><span class="line">        self.den = bottom</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.num) + &quot;/&quot; + str(self.den)</span><br><span class="line"></span><br><span class="line">    def show(self):</span><br><span class="line">        print(self.num, &quot;/&quot;, self.den)</span><br><span class="line"></span><br><span class="line">    def __add__(self, otherfraction):</span><br><span class="line">        newnum = self.num * otherfraction.den + \</span><br><span class="line">        self.den * otherfraction.num</span><br><span class="line">        newden = self.den * otherfraction.den</span><br><span class="line">        common = gcd(newnum, newden)</span><br><span class="line">        return Fraction(newnum//common, newden//common)</span><br><span class="line"></span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        firstnum = self.num * other.den</span><br><span class="line">        secondnum = other.num * self.den</span><br><span class="line">        return firstnum == secondnum</span><br></pre></td></tr></table></figure>
<h2 id="继承以逻辑门为例">继承：以逻辑门为例</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class LogicGate:#超类LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        self.label = n</span><br><span class="line">        self.output = None</span><br><span class="line">    def getLabel(self):</span><br><span class="line">        return self.label</span><br><span class="line">    def getOutput(self):</span><br><span class="line">        self.output = self.performGateLogic()</span><br><span class="line">        return self.output</span><br><span class="line"></span><br><span class="line">class BinaryGate(LogicGate):#有两个输入的门（与&amp;或门），继承LogicGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)#先调用父类的构造方法</span><br><span class="line"></span><br><span class="line">        self.pinA = None</span><br><span class="line">        self.pinB = None</span><br><span class="line"></span><br><span class="line">    def getPinA(self):</span><br><span class="line">        if self.pinA is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin A: input for gate&#x27; + \</span><br><span class="line">                            self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinA.getFrom().getOutput()</span><br><span class="line">    def getPinB(self):</span><br><span class="line">        if self.pinB is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin B: input for gate&#x27; + \</span><br><span class="line">                         self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pinB.getFrom().getOutput()</span><br><span class="line"></span><br><span class="line">class UnaryGate(LogicGate):#非门</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">        self.pin = None</span><br><span class="line">    def getPin(self):</span><br><span class="line">        if self.pin is None:</span><br><span class="line">            return int(input(&#x27;Enter Pin: input for gate &#x27; + self.getLabel() + &#x27;--&gt;&#x27;))</span><br><span class="line">        else:</span><br><span class="line">            return self.pin.getFrom().getOutput()#即返回连接器所连接的上一个类的输出</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AndGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==1 and b==1:</span><br><span class="line">            return 1</span><br><span class="line">        else:</span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">    # 在BinaryGate 类中，逻辑门有两个输入，但连接器必须只连接其中一个。如果两个都能连接，那么默认选择pinA。如果pinA 已经有了连接，就选择pinB。如果两个输入都已有连接，则无法连接逻辑门。</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"># g1 = AndGate(&#x27;G1&#x27;)</span><br><span class="line"># print(g1.getOutput())</span><br><span class="line"></span><br><span class="line">class OrGate(BinaryGate):#与门，继承BinaryGate</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        a = self.getPinA()</span><br><span class="line">        b = self.getPinB()</span><br><span class="line">        if a==0 and b==0:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pinA == None:</span><br><span class="line">            self.pinA = source</span><br><span class="line">        else:</span><br><span class="line">            if self.pinB == None:</span><br><span class="line">                self.pinB = source</span><br><span class="line">            else:</span><br><span class="line">                raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NotGate(UnaryGate):</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        super().__init__(n)</span><br><span class="line">    def performGateLogic(self):</span><br><span class="line">        pin = self.getPin()</span><br><span class="line">        if pin == 1:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return 1</span><br><span class="line">    def setNextPin(self, source):</span><br><span class="line">        if self.pin == None:</span><br><span class="line">            self.pin = source</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&quot;Error: NO EMPTY PINS&quot;)</span><br><span class="line"></span><br><span class="line">class Connector:#连接两个逻辑门，内部包含LogicGate的实例但不在继承关系中</span><br><span class="line">    def __init__(self,fgate,tgate):</span><br><span class="line">        self.fromgate = fgate</span><br><span class="line">        self.togate = tgate</span><br><span class="line">        tgate.setNextPin(self)#此处传递参数self,即让tgate的值设定为连接器这个类的实例</span><br><span class="line"></span><br><span class="line">    def getFrom(self):</span><br><span class="line">        return self.fromgate</span><br><span class="line"></span><br><span class="line">    def getTO(self):</span><br><span class="line">        return self.togate</span><br><span class="line"></span><br><span class="line">g1 = AndGate(&quot;G1&quot;)</span><br><span class="line">g2 = AndGate(&quot;G2&quot;)</span><br><span class="line">g3 = OrGate(&quot;G3&quot;)</span><br><span class="line">g4 = NotGate(&quot;G4&quot;)</span><br><span class="line">c1 = Connector(g1,g3)</span><br><span class="line">c2 = Connector(g2,g3)</span><br><span class="line">c3 = Connector(g3,g4)</span><br><span class="line">print(g4.getOutput())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="算法">算法</h1>
<h2 id="递归">递归</h2>
<p>递归的三个原则为：</p>
<p>①基本情况，即无需处理就可以直接return的情况</p>
<p>②算法会改变待处理数据的状态，使其更接近于基本状态</p>
<p>③调用自己</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def toStr(n,base):#递归示例，转换进制。</span><br><span class="line">    convertstring = &#x27;0123456789ABCDEF&#x27;</span><br><span class="line">    if n&lt;base:</span><br><span class="line">        return convertstring[n]</span><br><span class="line">    else:</span><br><span class="line">        return toStr(n//base,base)+convertstring[n%base]</span><br></pre></td></tr></table></figure>
<p><img src="image-20250316214546049.png" /></p>
<p>基本状态为一位数，于是不断将原整数整除10</p>
<p>用栈来储存结果，那么python会将函数的返回值储存在栈的顶端</p>
<p><img src="image-20250316220244264.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rStack = Stack()#将储存的结果压入栈中</span><br><span class="line">def toStr(n, base):</span><br><span class="line">    convertString = &quot;0123456789ABCDEF&quot;</span><br><span class="line">    if n &lt; base:</span><br><span class="line">        rStack.push(convertString[n])</span><br><span class="line">    else:</span><br><span class="line">        rStack.push(convertString[n % base])</span><br><span class="line">        toStr(n // base, base)</span><br></pre></td></tr></table></figure>
<p>示例：汉诺塔</p>
<p>其基本思路是，若有n层，从a挪到c，那问题可以分解为：</p>
<p>n-1层从a到b <span class="math inline">\(-&gt;\)</span> 1层从a到c
<span class="math inline">\(-&gt;\)</span> n-1层从b到c</p>
<p>代码如下（五层为例）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#汉诺塔</span><br><span class="line">def moveTower(height, fromPole, toPole, withPole):</span><br><span class="line">    if height &gt;= 1:</span><br><span class="line">        moveTower(height-1, fromPole, withPole, toPole)</span><br><span class="line">        moveDisk(fromPole, toPole)</span><br><span class="line">        moveTower(height-1, withPole, toPole, fromPole)</span><br><span class="line">def moveDisk(fromPole, toPole):</span><br><span class="line">    print(fromPole+&#x27;-&gt;&#x27;+toPole)</span><br><span class="line">moveTower(5,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="动态规划">动态规划</h2>
<p>以找零钱为例，采用递归算法结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def recMC(coinValueList, change):</span><br><span class="line">	minCoins = change</span><br><span class="line">	if change in coinValueList:</span><br><span class="line">		return 1</span><br><span class="line">	else:</span><br><span class="line">		for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">			numCoins = 1 + recMC(coinValueList, change-i)</span><br><span class="line">			if numCoins &lt; minCoins:</span><br><span class="line">				minCoins = numCoins</span><br><span class="line">	return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63)</span><br></pre></td></tr></table></figure>
<p>问题分解为：（change-i）的最小硬币数+1，其中i为一枚硬币的面值，故而循环多次直到遍历每一种可能。</p>
<p>该方法的问题在于有太多次对相同方案的遍历，如下图</p>
<p><img src="image-20250317153318112.png" /></p>
<p>相同的节点出现了多次，而每次出现都会进行完全一致而冗余的计算，这大大降低了算法的效率。</p>
<p>对此我们进行“针对性”的优化，即用<code>knownResults</code>储存每个节点所对应的数值，在计算时先查找这个节点是否已被计算过，以减少冗余的计算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def recMC(coinValueList, change, knownResults):</span><br><span class="line">    minCoins = change</span><br><span class="line">    if change in coinValueList:</span><br><span class="line">        return 1</span><br><span class="line">    elif knownResults[change] &gt; 0:</span><br><span class="line">        return knownResults[change]</span><br><span class="line">    else:</span><br><span class="line">        for i in [c for c in coinValueList if c &lt;= change]:</span><br><span class="line">            numCoins = 1 + recMC(coinValueList, change-i, knownResults)</span><br><span class="line">            if numCoins &lt; minCoins:</span><br><span class="line">                minCoins = numCoins</span><br><span class="line">                knownResults[change] = numCoins</span><br><span class="line">    return minCoins</span><br><span class="line"></span><br><span class="line">recMC([1, 5, 10, 25], 63, [0]*64)</span><br></pre></td></tr></table></figure>
<p>在这里介绍动态规划（dp），与上述算法不同，在这个问题上，递归采用了更为系统的储存方式，其会储存从1开始一直到change的每一个值对应的最少硬币数。</p>
<p>对于每一个值，其需要硬币的最小值，来自于这个值减去一个硬币的面值后所有情况的最小值+1。如对于（11）来说，为（1）+1，（6）+1，（10）+1，分别对应减去的硬币为10，5，1的情况，因此代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins):</span><br><span class="line">    for cents in range(change+1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents-j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j]+1</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">    return minCoins[change]</span><br></pre></td></tr></table></figure>
<p>如果我们需要得到对于每一个值，在硬币数量最少的情况下所有硬币的面值，我们实际上只需要储存新增的硬币的面值即可递推得到所有的面值，修改代码如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def dpMakeChange(coinValueList, change, minCoins, coinsUsed):</span><br><span class="line">    for cents in range(change + 1):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        newcoin = 1</span><br><span class="line">        for j in [c for c in coinValueList if c &lt;= cents]:</span><br><span class="line">            if minCoins[cents - j] + 1 &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j] + 1</span><br><span class="line">                newcoin = j</span><br><span class="line">            minCoins[cents] = coinCount</span><br><span class="line">            coinsUsed[cents] = newcoin</span><br><span class="line">    return minCoins[change]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printcoins(change, coinsUsed):</span><br><span class="line">    while change &gt; 0:</span><br><span class="line">        print(coinsUsed[change],end = &#x27; &#x27;)</span><br><span class="line">        change -= coinsUsed[change]</span><br><span class="line"></span><br><span class="line">coinsUsed = [0]*64</span><br><span class="line">minCoins = [0]*64</span><br><span class="line">dpMakeChange([1, 5, 10, 21, 25], 63, minCoins, coinsUsed)</span><br><span class="line">printcoins(63,coinsUsed)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>why not die?</title>
    <url>/2025/02/06/why_not_die/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="186cee9475152e14defbf62f46f311f1ec143b8a668b72df503fee4775faec5d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">why author alive？</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>你的颜色</title>
    <url>/2025/02/22/%E4%BD%A0%E7%9A%84%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>我对音乐和绘画都没有特别的喜好，因此这部作品于我而言虽毋庸置疑是一部好电影，但或许震撼感并没有那么强。</p>
<span id="more"></span>
<hr />
<p>作为商业片的话，这似乎并不是一部好作品，剧中的冲突显得轻微而温和，也并没有那么多小高潮能不断地调动人的情绪，抛开轻微的百合向不说，貌似没有什么能夺人眼球的特点。但是，它确实，从结果上来说，也让我这个对音乐和绘画兴趣不大的人能够一直看下去。在我的想象中，看这部电影理想的场景应该是：在某个阳光明媚的上午，舒服的坐在（躺在）书房的躺椅上，阳光能照在身上，我心平气和地在电脑上点开这部影片，带着降噪耳机在不被人干扰的情况下消磨掉一上午。整部影片的氛围于我确实就是这么休闲。</p>
<p>细节之处反而让我印象最深。声音和颜色像是这部影片的特点。单说声音，电影似乎着重放大了那些细微的声音：火焰燃烧与熄灭，雨滴落下，脚步，呼吸，翻书，乐队使用的那些接线连接时的声音……如若不是我的错觉，那这些效果似乎也暗示了窦子对于声音超乎常人的感知天赋。当然，末尾那一幕白噪音和背景音的突然消失也是一种常规但有效的声音手段。</p>
<p>而作为影片名字的一部分，颜色自然也是亮点之一。从我的感官上来说，色彩鲜明而不激烈，感觉十分舒服。不知为何，收音机那一抹红色令我印象深刻。而作为三人组的颜色，红绿蓝恰好是光的三原色，不知道是否是有什么隐喻？其实我一直觉得橙色或金色这种太阳的颜色可能是窦子的颜色，但结尾她翩然起舞时看到的正红带来的震撼绝对是这两种颜色无法比拟的，而一旦知晓了她是红色，那也就觉得红色确实最为合适了。而作永和路易这一绿一蓝更是怎么想怎么合理。</p>
<p>其他方面，很高兴没有把窦子能看到声音的颜色这一点作为“异能”着重描写，很高兴整部作品没有对感情线太多的描写。</p>
<p>是好电影，但我确实无法对剧情有很强的共情</p>
<p>总评：4/5</p>
<p><img src="微信图片_20250222233856.jpg" /></p>
<p><img src="微信图片_20250222233905.jpg" /></p>
<p><img src="微信图片_20250222233909.jpg" /></p>
<hr />
<p>P.S sorry ，窦子，一张你都没拍到</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>film</tag>
      </tags>
  </entry>
  <entry>
    <title>七年</title>
    <url>/2024/12/01/%E4%B8%83%E5%B9%B4/</url>
    <content><![CDATA[<p>我选择将对七年的测评作为第一篇博客，或许该站会变成个人的游戏评价收集处。(笑)</p>
<span id="more"></span>
<p>以下为正文：</p>
<hr />
<p>心绪难平。
我很难评价这部游戏，公正地说，它的游戏性极差，比同类型的《to the
moon》还差；我无意将它的剧情封神，但至少在我这里，它的剧情水平接近甚至于超越了去月球。剧情的逻辑毫无漏洞，我原本以为它忽视的东西在最后的最后忽然提起，并成为了扭转局面的关键。</p>
<p>前十五章可能略有些无聊，但中期到后期的处理十分紧凑，每一章结尾都会是刀子或者反转。当在主要故事末尾出现两人相逢时我终于嘴角出现了笑容，但此后超过十个的ep又一点点温柔地展现了残酷的真实……剧情中的伏笔数量超出我想象，许多我以为只是闲步的对话在数十章后突然得到了解释或者利用，即使是原本并不令人在意的配角也隐晦刻画了背后的故事。
游戏中交织的友情，爱情，亲情……感人至深。春人与葵，17711个七年，当葵在漫天的纸屑配合着戛然而止的bgm下说出那句台词时我的心脏仿佛也骤停了一下。
（试图对感情线评判但是失败）两人之间的这种信任简直是一个奇迹。即便最后两人不再有交集，但春人仍然没有失约。这种程度的感情或许并不现实，但我仍然羡慕并渴望着。
最后，是好结局哦～</p>
<p>这部游戏无愧于其taptap9.9的评分，也值得我连续两天熬至四点的期待。</p>
<p>《我在七年后等着你》</p>
<p>可玩性：1/5</p>
<p>音乐：4.5/5</p>
<p>画面：3/5</p>
<p>剧情：5/5（5是评分的上限不是这部游戏的上限）</p>
<p>总评：5/5</p>
<p><img src="微信图片_20241201223907.jpg" /></p>
<p><img src="微信图片_20241201223917.jpg" /></p>
<p><img src="微信图片_20241201223921.jpg" /></p>
<p><img src="微信图片_20241201223923.jpg" /></p>
<p><img src="微信图片_20241201223927.jpg" /></p>
<p><img src="微信图片_20241201223930.jpg" /></p>
<hr />
<p>喜报：截至2025.1.20
23:26，该篇评测在taptap上获得了155赞13回复1转发，并被选为嘴替发言。</p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>画中世界</title>
    <url>/2025/02/17/%E7%94%BB%E4%B8%AD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>游戏名：画中世界/Gorogoa</p>
<p>很有意思的解密作品，精良而小巧。</p>
<span id="more"></span>
<p>也是一两年前玩的游戏了，剧情简单而隐晦，倒是没什么好说的。但该作的解密，构思以及美术精巧至极，常常又令我拍案叫绝之处。</p>
<p>游戏的主要玩法是通过画面的移动，重叠，视觉错觉实现解密和进程推动，少数的彩蛋也能让人眼前一亮，玩起来的感觉有种驱动精密机械运作的感觉，环环相扣精妙绝伦，兼之游戏流程较短，很容易让人一口气通关。</p>
<p>游戏的难度中等，循序渐进但不乏大开脑洞之处，但各种谜题十分合理，正如前文所说：”精巧“。</p>
<p>手绘风格的美术令人眼前一亮，用来衬托全作庄严而孤独的氛围恰到好处。当循序渐进的音乐配合着游戏结局时的恍然大悟，总会有一种孤独而荒谬的感觉，美术风格对于结局时那种略带宗教恐怖和克苏鲁的画面也是十分自然，”来自东方的神秘力量“刚好可以用来形容这部游戏给人的感觉。</p>
<p>《画中世界》</p>
<p>可玩性：5/5</p>
<p>音乐：4/5</p>
<p>画面：4.5/5</p>
<p>剧情：3/5</p>
<p>总评：4.5/5</p>
<p><img src="Screenshot_20230604_171258_com.xd.gorogoa.tap.jpg" /></p>
<video muted autoplay="autoplay" loop="loop">
<source src="SVID_20230604_171538_1.mp4" type="video/mp4">
</source>
</video>
<video muted autoplay="autoplay" loop="loop">
<source src="SVID_20230604_171301_1.mp4" type="video/mp4">
</source>
</video>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>紫罗兰永恒花园</title>
    <url>/2025/01/30/%E7%B4%AB%E7%BD%97%E5%85%B0%E6%B0%B8%E6%81%92%E8%8A%B1%E5%9B%AD/</url>
    <content><![CDATA[<p>花无凋零之时，意无传达之期。爱情亘古不变，紫罗兰永世长存。</p>
<span id="more"></span>
<hr />
<p>纯洁，纯粹的爱。</p>
<p>美好到任何人都不愿意亵渎的情感。</p>
<p>很高兴最后是happy ending，即便仍有遗憾，但已足够美好。</p>
<p>如若有一天忘记了剧情而再次看到这寥寥几句话，希望你重温这段故事。</p>
<p><img src="keyvisual02.jpg" /></p>
<p><img src="keyvisual01.jpg" /></p>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>film</tag>
      </tags>
  </entry>
</search>
